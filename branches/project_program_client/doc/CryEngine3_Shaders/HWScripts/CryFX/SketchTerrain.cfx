
#include "Common.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "ShaderDrawType = Light;"
           "ShaderType = General;"
>;

float4x4 LayerTexGen      : PB_TerrainLayerGen;
float4 TexelDensityParam  : PB_TexelDensityParam;
float4 TexelDensityColor  : PB_TexelDensityColor;

#include "ShadeLib.cfi"

// Un-Tweakables /////////////////

ENVIRONMENTMAP
ENVIRONMENTCUBEMAP

#include "VertexLib.cfi"

///////////////// terrain vertex shader //////////////////
vert2FragGeneral SketchTerrainLayerVS(app2vertGeneral IN)
{
  vert2FragGeneral OUT = (vert2FragGeneral)0; 

  streamPos vertPassPos = (streamPos)0;
  streamPos_FromGeneral(IN, vertPassPos);

  OUT.HPosition = Pos_VS_Terrain(0.001f, g_VS_ViewProjZeroMatr, vertPassPos);
  
#if !%_RT_OBJ_IDENTITY
  vertPassPos.WorldPos.xyz += g_VS_WorldViewPos.xyz;
#endif

  float4 tcLayer;

  float3 vDiffPos = vertPassPos.WorldPos.xyz;
  vDiffPos.xy -= LayerTexGen[3].xy;
  tcLayer.xy = mul((float2x3)LayerTexGen, vDiffPos);
  tcLayer.z = 0;
  tcLayer.w = vertPassPos.Position.w;
  _TCModify(tcLayer, OUT.baseTC, vertPassPos.Position, float3(1,1,1), TS_DIFFUSE);

  float fDist = length(vertPassPos.WorldPos.xyz - g_VS_WorldViewPos.xyz);
  fDist = pow(min(fDist/max(0.001, LayerTexGen[0].w), 1), 4);
  OUT.Color.g = (1-fDist);

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
pixout SketchTexelDensityPS(vert2FragGeneral IN)
{
	pixout OUT = (pixout) 0;  

  float2 p = frac(IN.baseTC.xy * TexelDensityParam.xy / 32.0); // 32x32 texels are a 2x2 checkerboard block
  float color = (p.y < 0.5 ? 1 : 0.0);
  float checker = p.x < 0.5 ? 1-color : color;
  
  OUT.Color.xyz = 0.1*tex2D(diffuseMapSampler, IN.baseTC.xy)+0.9*float3(checker*TexelDensityColor.xyz);
	OUT.Color.w = IN.Color.g;

	return OUT;
}

//////////////////////////////// technique ////////////////

technique TexelDensityTerrainLayer
<
  string Script = "TechniqueZ=ZPass;"
>
{
  pass p0
  {
    VertexShader = compile vs_3_0 SketchTerrainLayerVS();
    PixelShader = compile ps_3_0 SketchTexelDensityPS();
    
    ZEnable = true;
    CullMode = Back;

    SrcBlend = SrcAlpha;
    DestBlend = InvSrcAlpha;
  
    AlphaBlendEnable = true;
    ZWriteEnable = false;
  }
}

#include "CommonZPass.cfi"
