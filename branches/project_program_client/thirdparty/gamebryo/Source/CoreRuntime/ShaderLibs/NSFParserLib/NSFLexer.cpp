#define yy_create_buffer NSFParser_create_buffer
#define yy_delete_buffer NSFParser_delete_buffer
#define yy_scan_buffer NSFParser_scan_buffer
#define yy_scan_string NSFParser_scan_string
#define yy_scan_bytes NSFParser_scan_bytes
#define yy_flex_debug NSFParser_flex_debug
#define yy_init_buffer NSFParser_init_buffer
#define yy_flush_buffer NSFParser_flush_buffer
#define yy_load_buffer_state NSFParser_load_buffer_state
#define yy_switch_to_buffer NSFParser_switch_to_buffer
#define yyin NSFParserin
#define yyleng NSFParserleng
#define yylex NSFParserlex
#define yyout NSFParserout
#define yyrestart NSFParserrestart
#define yytext NSFParsertext
#define yywrap NSFParserwrap

#line 20 "..\\NSFLexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 342
#define YY_END_OF_BUFFER 343
static yyconst short int yy_accept[2141] =
    {   0,
        0,    0,  343,  341,    1,  336,  337,  341,   10,   11,
       20,   22,   18,   23,   21,    2,    2,   26,   25,   14,
       17,   15,   24,   12,   13,   19,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,    8,   16,    9,    1,    0,
      340,    2,    7,    6,    0,    3,    0,    2,  338,  338,
      339,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,    3,  339,
        3,  339,  339,    0,    4,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  319,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      339,  338,  338,  338,  338,    3,    0,    0,    3,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      315,  338,  338,  338,  338,  338,  338,  338,  154,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  123,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  334,  338,  338,
      338,  338,  338,  338,  338,  338,  320,  338,  338,    5,
      338,  338,  338,  338,    3,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  335,  318,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  314,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  155,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  121,  126,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  122,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  290,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  187,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  138,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      118,  338,  338,  338,  338,  338,  338,  338,  338,  305,
      338,  338,  338,  338,  338,  338,  249,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  235,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  289,  209,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      240,  245,  241,  338,  338,  338,  244,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  326,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  282,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      230,  338,  338,  338,  338,  338,  338,  316,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  153,  338,  338,  338,  295,  297,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  303,  323,  338,  338,  338,   27,  246,  338,  243,
      338,  338,  338,  338,  338,  338,   29,  338,  338,   48,
      338,  338,  338,  338,  338,   45,  338,  338,  338,  338,
       96,  338,  338,  338,  338,  338,  338,  338,  338,  338,
       95,  338,  338,  338,  338,  338,  104,  338,  338,  117,
      119,  338,  338,  111,  338,  338,  338,  338,  184,  338,
      304,  324,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  273,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      188,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  302,  322,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  124,  338,  338,
      338,  338,  292,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  306,  338,  338,  338,  338,  338,  242,  247,
      338,  338,  338,   28,  338,  338,  338,  338,   50,  338,
      338,   44,  338,  338,  338,  338,  338,  338,   63,   64,

       65,   66,  338,  338,  338,  338,  338,  338,   84,   85,
       86,   87,   69,   70,   71,   72,   73,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  110,  338,  120,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  308,  338,
      338,  338,  338,  338,  231,  232,  338,  338,  236,  237,
      338,  338,  338,  267,  338,  284,  338,  338,  338,  338,
      338,  288,  287,  338,  338,  338,  338,  274,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  127,  338,  338,  338,  338,
      338,  338,  338,  129,  338,  338,  338,  294,  296,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,   47,  338,   59,  338,  338,  338,   60,  338,  338,
      338,   88,  338,  338,  338,  338,  338,  338,   75,   77,
       79,   81,   89,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  113,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  234,
      338,  269,  338,  283,  338,  338,  338,  286,  338,  338,
      338,  338,  275,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  203,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  161,  338,  338,  157,  338,  338,
      338,  338,  156,  338,  338,  338,  338,  338,  338,  179,
      180,  181,  182,  338,  338,  338,  338,  185,  186,  338,
      325,  338,  338,  136,  130,  338,  338,  338,  338,  338,
      338,  338,  293,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  331,  338,  248,
      338,  152,  338,   61,  338,  338,  338,  338,   32,   49,
      338,   67,  338,   97,  338,  338,  338,  338,   83,  338,
       91,   93,  338,  338,  338,  338,  114,  338,  338,  107,
      338,  112,  338,  291,  321,  338,  307,  338,  338,  309,
      338,  338,  338,  338,  270,  338,  268,  338,  197,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  206,  338,  338,  338,  212,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  166,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  178,
      338,  338,  189,  338,  317,  338,  338,  131,  132,  133,
      128,  338,  338,  338,  338,  338,  338,  149,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  333,  332,  338,
      338,  338,  338,  338,   62,   46,   33,   34,   35,   36,
       37,   38,   39,   40,   51,   52,   53,   54,   55,   56,
       57,   58,   98,   99,  338,  338,  338,  338,  338,  338,
      338,  105,  338,  338,  338,  116,  338,  338,  338,  338,
      338,  338,  338,  239,  233,  338,  338,  338,  202,  285,
      338,  338,  338,  338,  338,  279,  210,  213,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  162,  163,  164,  338,
      338,  338,  158,  159,  160,  165,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      134,  137,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  299,  151,  312,  330,  313,
      338,  338,  338,  338,   74,   76,   78,   80,   90,  338,
       68,  103,  100,  338,  338,  338,  338,  115,  300,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  280,  338,

      338,  338,  338,  338,  338,  338,  338,  226,  338,  207,
      208,  338,  338,  338,  338,  338,  204,  205,  250,  251,
      252,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  183,  190,  338,
      298,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,   41,   82,   92,   94,
      338,  101,  102,  338,  108,  338,  301,  311,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  211,  338,  338,
      338,  338,  338,  228,  338,  338,  338,  229,  221,  263,

      338,  338,  338,  265,  338,  338,  254,  338,  338,  255,
      256,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  150,  135,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      142,  338,   30,   43,   42,  338,  109,  338,  310,  338,
      338,  271,  338,  338,  338,  276,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      264,  262,  338,  338,  338,  338,  338,  338,  338,  167,
      168,  169,  170,  338,  338,  338,  338,  338,  338,  338,
      191,  338,  338,  338,  338,  327,  338,  338,  338,  140,

      338,  338,  338,  338,  338,  125,  338,  338,  238,  272,
      338,  338,  338,  338,  338,  278,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  253,  338,  338,  338,
      258,  338,  260,  338,  171,  173,  174,  338,  338,  338,
      196,  338,  338,  193,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  281,
      277,  338,  338,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,  261,  338,  338,  172,  176,  338,  194,
      195,  338,  338,  338,  338,  338,  139,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  338,

      338,  338,  338,  338,  338,  338,  338,  338,  266,  259,
      257,  338,  192,  338,  338,  338,  338,  338,  338,  338,
      338,  338,  338,   31,  338,  338,  338,  338,  338,  217,
      338,  218,  338,  338,  338,  338,  338,  338,  338,  328,
      338,  338,  146,  338,  338,  338,  338,  338,  338,  198,
      338,  338,  220,  214,  338,  215,  338,  338,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  338,  145,
      338,  338,  200,  216,  338,  338,  338,  338,  338,  338,
      338,  338,  329,  141,  338,  338,  338,  143,  106,  199,
      338,  219,  227,  338,  338,  338,  338,  338,  338,  148,

      338,  338,  338,  338,  338,  338,  338,  338,  338,  147,
      338,  338,  338,  338,  338,  338,  175,  338,  338,  338,
      222,  223,  338,  338,  177,  338,  338,  338,  338,  338,
      338,  338,  338,  144,  338,  224,  225,  338,  201,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    1,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   22,   23,   24,   25,
       26,   27,    1,   28,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       29,    1,   30,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[61] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    1,
        3,    4,    5,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    1,    1,    1,
        7,    7,    7,    7,    7,    8,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1,    1,    1
    } ;

static yyconst short int yy_base[2149] =
    {   0,
        0,    0,  257, 7308,  197, 7308, 7308,  182, 7308, 7308,
     7308,    0, 7308,    0,   53,   55,   99, 7308, 7308, 7308,
     7308, 7308, 7308, 7308, 7308,   50,   52,   82,   80,   66,
       92,   95,  113,   69,   86,  120,   74,  122,  128,  132,
      130,  156,  172,  136,  212, 7308, 7308, 7308,  181,  172,
     7308,  162, 7308, 7308,  152,  249,  149,    0,   71,  274,
        0,  138,  140,  134,  145,  181,  184,  188,  158,  198,
      204,  207,  225,  223,  227,  230,  232,   84,  247,  239,
      287,  234,  267,  289,  291,  300,  242,  302,  304,  307,
      312,  314,  317,  321,  332,  328,  341,  324,  334,  350,

      355,  358,  361,  367,  369,  237,  373,  387,  123,   76,
      427,    0,  455,   72,    0,  381,  389,  391,  397,  401,
      446,  403,  407,  411,  418,  455,  423,  413,  416,  470,
      442,   78,  474,  477,  481,  483,  485,  487,  489,  491,
      494,  496,  502,  499,  509,  511,  504,  516,  519,  507,
      531,  535,  537,  541,  550,  546,  552,  554,  556,  561,
      564,  566,  573,  582,  575,  587,  590,  578,  593,  595,
      607,  610,  615,  622,  624,  626,  628,  633,  635,  641,
      653,  637,  644,  646,  651,  118,   91,  194,  203,  671,
      679,  681,  684,  686,  688,  691,  693,  695,  698,  701,

      703,  705,  710,  712,  714,  720,  730,  734,  736,  738,
      740,  742,  744,  750,  755,  752,  761,  763,  769,  771,
      779,  819,  792,  783,  773,  785,  822,  802,  804,  833,
      835,  837,  844,  847,  849,  855,  859,  862,  864,  870,
      872,  876,  878,  882,  887,  889,  895,  901,  903,  905,
      909,  907,  914,  922,  934,  936,  938,  945,  948,  958,
      950,  960,  952,  967,  963,  976,  984,  989,  991,    0,
      993,  999, 1002, 1004,    0, 1006, 1010, 1012, 1015, 1018,
     1020, 1022, 1024, 1026, 1028, 1034, 1037, 1039, 1042, 1046,
     1052, 1061, 1063, 1065, 1067, 1069, 1071, 1077, 1079, 1084,

     1086, 1091, 1081, 1095, 1097, 1107, 1119, 1121, 1123, 1127,
     1131, 1133, 1135, 1137, 1139, 1141, 1143, 1148, 1150, 1152,
     1156, 1176, 1160, 1170, 1181, 1184, 1188, 1194, 1198, 1200,
     1202, 1204, 1206, 1209, 1213, 1227, 1216, 1220, 1241, 1244,
     1248, 1250, 1254, 1256, 1259, 1263, 1261, 1265, 1268, 1270,
     1272, 1274, 1276, 1279, 1283, 1291, 1293, 1298, 1300, 1309,
     1311, 1320, 1322, 1316, 1326, 1352, 1328, 1331, 1333, 1346,
     1338, 1355, 1349, 1357, 1359, 1366, 1390, 1368, 1370, 1400,
     1402, 1404, 1375, 1411, 1413, 1415, 1418, 1420, 1422, 1424,
     1430, 1432, 1443, 1445, 1449, 1455, 1458, 1460, 1462, 1464,

     1466, 1468, 1472, 1478, 1481, 1488, 1490, 1492, 1494, 1496,
     1501, 1507, 1510, 1515, 1517, 1519, 1521, 1523, 1527, 1529,
     1531, 1542, 1536, 1549, 1551, 1544, 1554, 1559, 1556, 1566,
     1562, 1572, 1574, 1576, 1578, 1583, 1593, 1597, 1599, 1602,
     1606, 1609, 1611, 1613, 1615, 1618, 1626, 1628, 1636, 1641,
     1644, 1638, 1650, 1653, 1655, 1658, 1663, 1660, 1666, 1668,
     1673, 1675, 1678, 1681, 1687, 1684, 1690, 1694, 1698, 1700,
     1706, 1702, 1709, 1711, 1713, 1724, 1732, 1734, 1740, 1742,
     1744, 1747, 1751, 1754, 1756, 1758, 1762, 1764, 1769, 1773,
     1778, 1782, 1787, 1789, 1794, 1798, 1801, 1803, 1815, 1817,

     1822, 1824, 1833, 1836, 1838, 1840, 1842, 1844, 1847, 1852,
     1854, 1849, 1860, 1867, 1869, 1876, 1878, 1886, 1881, 1889,
     1892, 1894, 1904, 1908, 1896, 1911, 1914, 1923, 1925, 1931,
     1935, 1939, 1943, 1945, 1949, 1954, 1958, 1992, 1960, 1965,
     1967, 1971, 1973, 1977, 1982, 1988, 1984, 2009, 2011, 1994,
     2018, 2020, 2025, 2039, 2041, 1997, 2043, 2047, 2051, 2053,
     2055, 2057, 2060, 2062, 2064, 2068, 2071, 2078, 2083, 2085,
     2088, 2092, 2094, 2096, 2098, 2103, 2107, 2109, 2112, 2116,
     2122, 2118, 2125, 2127, 2133, 2135, 2138, 2140, 2151, 2158,
     2161, 2164, 2166, 2168, 2170, 2172, 2174, 2176, 2179, 2181,

     2184, 2186, 2191, 2196, 2198, 2210, 2214, 2216, 2221, 2223,
     2225, 2227, 2230, 2234, 2239, 2242, 2244, 2247, 2255, 2257,
     2259, 2261, 2264, 2271, 2276, 2279, 2285, 2287, 2289, 2291,
     2293, 2295, 2297, 2305, 2303, 2310, 2313, 2315, 2308, 2317,
     2320, 2322, 2324, 2335, 2337, 2342, 2344, 2347, 2353, 2355,
     2357, 2363, 2359, 2366, 2368, 2370, 2372, 2374, 2376, 2381,
     2389, 2391, 2401, 2397, 2404, 2408, 2412, 2414, 2417, 2419,
     2422, 2424, 2438, 2426, 2434, 2440, 2431, 2447, 2449, 2456,
     2459, 2467, 2469, 2471, 2473, 2476, 2481, 2483, 2479, 2486,
     2491, 2497, 2499, 2501, 2503, 2520, 2505, 2522, 2526, 2528,

     2530, 2532, 2543, 2546, 2548, 2551, 2553, 2561, 2557, 2563,
     2567, 2571, 2573, 2577, 2579, 2585, 2588, 2590, 2593, 2597,
     2600, 2605, 2602, 2608, 2610, 2614, 2619, 2622, 2625, 2629,
     2632, 2636, 2639, 2643, 2645, 2649, 2651, 2655, 2653, 2660,
     2662, 2667, 2669, 2671, 2676, 2678, 2680, 2682, 2685, 2689,
     2692, 2695, 2697, 2706, 2711, 2714, 2718, 2723, 2725, 2727,
     2729, 2736, 2732, 2739, 2742, 2744, 2754, 2758, 2768, 2772,
     2774, 2776, 2778, 2783, 2785, 2787, 2789, 2793, 2795, 2797,
     2799, 2803, 2805, 2808, 2810, 2818, 2822, 2832, 2834, 2839,
     2841, 2843, 2845, 2848, 2853, 2856, 2860, 2862, 2864, 2866,

     2868, 2870, 2872, 2876, 2881, 2888, 2891, 2883, 2894, 2898,
     2901, 2906, 2910, 2915, 2919, 2921, 2923, 2925, 2927, 2929,
     2932, 2934, 2944, 2942, 2949, 2953, 2960, 2965, 2957, 2968,
     2970, 2972, 2974, 2976, 2986, 2990, 2992, 2994, 2996, 2998,
     3000, 3011, 3006, 3014, 3017, 3020, 3022, 3024, 3028, 3030,
     3034, 3039, 3045, 3049, 3056, 3058, 3061, 3063, 3071, 3065,
     3068, 3074, 3077, 3080, 3082, 3087, 3090, 3093, 3099, 3105,
     3108, 3114, 3116, 3121, 3123, 3125, 3127, 3131, 3134, 3138,
     3142, 3145, 3149, 3151, 3156, 3158, 3160, 3166, 3172, 3175,
     3177, 3181, 3184, 3186, 3188, 3192, 3197, 3194, 3199, 3201,

     3203, 3205, 3207, 3211, 3220, 3224, 3229, 3232, 3234, 3244,
     3246, 3248, 3250, 3252, 3255, 3257, 3259, 3261, 3263, 3266,
     3268, 3271, 3273, 3283, 3285, 3287, 3289, 3295, 3298, 3300,
     3302, 3311, 3309, 3307, 3318, 3322, 3324, 3334, 3348, 3355,
     3329, 3341, 3357, 3362, 3364, 3366, 3368, 3370, 3372, 3374,
     3378, 3381, 3383, 3385, 3389, 3392, 3395, 3404, 3406, 3408,
     3416, 3418, 3420, 3422, 3426, 3428, 3430, 3432, 3436, 3434,
     3442, 3439, 3444, 3447, 3452, 3460, 3462, 3464, 3469, 3476,
     3480, 3485, 3482, 3488, 3490, 3494, 3492, 3502, 3496, 3504,
     3509, 3511, 3520, 3525, 3528, 3530, 3534, 3536, 3538, 3541,

     3546, 3548, 3550, 3553, 3555, 3561, 3563, 3576, 3578, 3585,
     3590, 3592, 3594, 3596, 3600, 3602, 3606, 3608, 3610, 3614,
     3622, 3624, 3612, 3626, 3635, 3640, 3643, 3649, 3651, 3656,
     3661, 3663, 3665, 3672, 3667, 3674, 3676, 3679, 3688, 3690,
     3694, 3700, 3704, 3707, 3714, 3709, 3716, 3719, 3721, 3723,
     3729, 3731, 3733, 3735, 3737, 3744, 3747, 3750, 3754, 3758,
     3760, 3764, 3769, 3771, 3773, 3778, 3780, 3783, 3788, 3790,
     3792, 3800, 3804, 3809, 3813, 3816, 3822, 3825, 3827, 3829,
     3831, 3833, 3840, 3835, 3837, 3842, 3847, 3849, 3853, 3863,
     3865, 3867, 3874, 3876, 3878, 3881, 3888, 3883, 3891, 3894,

     3896, 3900, 3904, 3906, 3908, 3911, 3913, 3918, 3915, 3929,
     3931, 3933, 3935, 3937, 3943, 3945, 3947, 3949, 3952, 3959,
     3961, 3963, 3965, 3971, 3973, 3984, 3986, 3988, 3994, 3998,
     4001, 4009, 4011, 4014, 4016, 4019, 4024, 4026, 4028, 4031,
     4033, 4040, 4035, 4043, 4051, 4053, 4056, 4058, 4061, 4063,
     4068, 4071, 4074, 4077, 4079, 4081, 4083, 4085, 4087, 4089,
     4093, 4096, 4098, 4100, 4104, 4110, 4112, 4115, 4117, 4123,
     4125, 4127, 4129, 4131, 4133, 4135, 4140, 4142, 4146, 4152,
     4156, 4158, 4166, 4168, 4172, 4176, 4178, 4180, 4184, 4186,
     4190, 4196, 4192, 4201, 4207, 4209, 4211, 4215, 4218, 4222,

     4226, 4232, 4238, 4241, 4243, 4245, 4247, 4251, 4249, 4259,
     4261, 4264, 4270, 4276, 4285, 4278, 4292, 4294, 4296, 4299,
     4304, 4311, 4317, 4319, 4321, 4323, 4325, 4329, 4331, 4335,
     4337, 4340, 4343, 4345, 4347, 4351, 4353, 4355, 4357, 4363,
     4365, 4371, 4375, 4378, 4382, 4386, 4388, 4393, 4395, 4397,
     4399, 4403, 4408, 4410, 4413, 4415, 4422, 4429, 4431, 4434,
     4436, 4440, 4445, 4447, 4449, 4452, 4460, 4465, 4467, 4469,
     4472, 4474, 4476, 4478, 4482, 4486, 4488, 4495, 4492, 4498,
     4500, 4502, 4504, 4509, 4511, 4513, 4515, 4517, 4520, 4523,
     4530, 4526, 4534, 4532, 4536, 4538, 4541, 4547, 4554, 4558,

     4566, 4568, 4571, 4574, 4580, 4583, 4585, 4588, 4590, 4593,
     4597, 4599, 4602, 4604, 4610, 4612, 4617, 4614, 4622, 4624,
     4626, 4629, 4631, 4635, 4640, 4642, 4650, 4654, 4662, 4656,
     4664, 4666, 4668, 4670, 4672, 4677, 4679, 4682, 4684, 4687,
     4689, 4694, 4691, 4702, 4697, 4704, 4707, 4714, 4710, 4716,
     4718, 4729, 4733, 4735, 4743, 4750, 4752, 4754, 4758, 4762,
     4765, 4767, 4769, 4771, 4773, 4779, 4775, 4783, 4785, 4789,
     4791, 4793, 4802, 4806, 4810, 4814, 4816, 4818, 4822, 4825,
     4827, 4831, 4835, 4837, 4839, 4841, 4850, 4843, 4845, 4852,
     4857, 4859, 4861, 4863, 4865, 4871, 4873, 4878, 4875, 4885,

     4888, 4890, 4894, 4900, 4903, 4907, 4912, 4917, 4919, 4921,
     4923, 4925, 4928, 4930, 4932, 4937, 4939, 4941, 4968, 4943,
     4976, 4945, 4947, 4949, 4986, 4956, 4988, 4961, 4990, 4992,
     4996, 4999, 5001, 5003, 5005, 5007, 5013, 5015, 5018, 5020,
     5022, 5024, 5028, 5030, 5032, 5035, 5037, 5045, 5051, 5049,
     5053, 5057, 5060, 5062, 5064, 5066, 5068, 5070, 5076, 5080,
     5082, 5086, 5088, 5093, 5097, 5095, 5103, 5107, 5109, 5111,
     5113, 5118, 5121, 5123, 5131, 5141, 5134, 5139, 5149, 5151,
     5155, 5164, 5166, 5170, 5172, 5176, 5178, 5180, 5182, 5184,
     5186, 5189, 5195, 5197, 5202, 5207, 5209, 5230, 5211, 5213,

     5221, 5223, 5235, 5237, 5242, 5246, 5250, 5252, 5256, 5258,
     5264, 5266, 5268, 5270, 5273, 5275, 5277, 5279, 5283, 5291,
     5296, 5300, 5302, 5304, 5306, 5310, 5308, 5312, 5315, 5319,
     5317, 5325, 5327, 5321, 5329, 5332, 5334, 5339, 5342, 5350,
     5354, 5357, 5366, 5368, 5370, 5375, 5379, 5381, 5383, 5386,
     5389, 5391, 5393, 5396, 5398, 5400, 5402, 5404, 5406, 5408,
     5410, 5412, 5414, 5416, 5418, 5420, 5427, 5429, 5434, 5431,
     5436, 5438, 5443, 5445, 5449, 5447, 5451, 5454, 5456, 5458,
     5460, 5462, 5465, 5469, 5477, 5481, 5483, 5490, 5494, 5496,
     5498, 5502, 5506, 5508, 5510, 5513, 5517, 5519, 5525, 5522,

     5529, 5531, 5534, 5536, 5540, 5542, 5547, 5550, 5544, 5553,
     5555, 5557, 5564, 5566, 5573, 5579, 5586, 5581, 5588, 5590,
     5592, 5598, 5600, 5608, 5595, 5602, 5610, 5617, 5620, 5627,
     5633, 5630, 5635, 5637, 5639, 5642, 5644, 5647, 5650, 5653,
     5656, 5658, 5660, 5663, 5665, 5667, 5674, 5671, 5679, 5684,
     5686, 5695, 5698, 5700, 5702, 5704, 5708, 5706, 5715, 5712,
     5720, 5722, 5724, 5726, 5728, 5731, 5733, 5742, 5744, 5746,
     5749, 5751, 5754, 5757, 5760, 5763, 5765, 5768, 5770, 5772,
     5779, 5781, 5784, 5786, 5788, 5790, 5794, 5796, 5798, 5800,
     5802, 5804, 5808, 5810, 5812, 5816, 5818, 5820, 5824, 5831,

     5839, 5843, 5845, 5849, 5851, 5853, 5855, 5860, 5857, 5863,
     5865, 5867, 5869, 5872, 5876, 5879, 5884, 5886, 5893, 5895,
     5897, 5904, 5906, 5908, 5910, 5914, 5916, 5918, 5920, 5922,
     5924, 5927, 5931, 5933, 5940, 5946, 5950, 5944, 5956, 5968,
     5970, 5974, 5977, 5980, 5982, 5986, 5984, 5988, 5990, 5992,
     5994, 5996, 5999, 6001, 6010, 6013, 6017, 6019, 6021, 6023,
     6025, 6029, 6032, 6040, 6047, 6049, 6051, 6054, 6056, 6058,
     6061, 6065, 6067, 6069, 6072, 6074, 6076, 6078, 6081, 6083,
     6090, 6093, 6095, 6098, 6100, 6102, 6104, 6108, 6110, 6114,
     6125, 6133, 6135, 6139, 6143, 6146, 6151, 6153, 6155, 6158,

     6160, 6162, 6164, 6166, 6168, 6177, 6181, 6183, 6185, 6187,
     6189, 6191, 6197, 6201, 6204, 6213, 6221, 6217, 6210, 6225,
     6227, 6229, 6231, 6237, 6242, 6244, 6246, 6248, 6252, 6254,
     6256, 6258, 6267, 6263, 6274, 6270, 6276, 6279, 6284, 6281,
     6288, 6292, 6294, 6298, 6301, 6304, 6310, 6312, 6315, 6321,
     6323, 6318, 6325, 6327, 6333, 6335, 6337, 6340, 6343, 6348,
     6350, 6352, 6354, 6362, 6375, 6377, 6379, 6381, 6384, 6386,
     6388, 6390, 6392, 6396, 6398, 6400, 6402, 6407, 6411, 6404,
     6418, 6422, 6424, 6432, 6436, 6438, 6440, 6442, 6444, 6447,
     6449, 6452, 6454, 6456, 6458, 6460, 6463, 6468, 6470, 6472,

     6476, 6481, 6483, 6485, 6487, 6490, 6492, 6498, 6500, 6502,
     6509, 6513, 6515, 6520, 6522, 6525, 6527, 6529, 6531, 6533,
     6536, 6543, 6538, 6554, 6547, 6549, 6561, 6563, 6569, 6574,
     6576, 6578, 6583, 6585, 6587, 6589, 6591, 6593, 6595, 6599,
     6601, 6603, 6605, 6607, 6610, 6613, 6617, 6619, 6615, 6626,
     6621, 6630, 6632, 6639, 6642, 6644, 6649, 6655, 6657, 6659,
     6661, 6664, 6670, 6676, 6678, 6684, 6672, 6686, 6690, 6692,
     6694, 6696, 6700, 6713, 6715, 6717, 6722, 6724, 6726, 6728,
     6731, 6733, 6735, 6738, 6740, 6742, 6744, 6746, 6748, 6751,
     6753, 6760, 6764, 6766, 6774, 6776, 6782, 6784, 6787, 6792,

     6795, 6797, 6800, 6802, 6808, 6818, 6804, 6820, 6825, 6828,
     6832, 6834, 6836, 6838, 6842, 6844, 6846, 6848, 6850, 6852,
     6854, 6858, 6862, 6864, 6867, 6871, 6873, 6876, 6882, 6888,
     6890, 6900, 6903, 6905, 6907, 6909, 6912, 6914, 6918, 6920,
     6924, 6926, 6928, 6934, 6936, 6939, 6941, 6944, 6947, 6951,
     6954, 6956, 6958, 6960, 6962, 6964, 6969, 6974, 6980, 6984,
     6986, 6976, 6989, 6992, 6997, 7001, 7010, 7012, 7014, 7017,
     7022, 7019, 7026, 7024, 7028, 7033, 7030, 7037, 7039, 7043,
     7047, 7049, 7055, 7058, 7069, 7071, 7074, 7076, 7078, 7080,
     7082, 7084, 7086, 7089, 7092, 7094, 7096, 7098, 7100, 7102,

     7106, 7108, 7110, 7112, 7121, 7114, 7125, 7128, 7130, 7132,
     7134, 7149, 7151, 7153, 7155, 7160, 7163, 7167, 7169, 7174,
     7171, 7176, 7178, 7180, 7182, 7184, 7186, 7192, 7196, 7199,
     7201, 7204, 7212, 7206, 7216, 7218, 7220, 7224, 7227, 7308,
     7273,  130, 7280, 7285, 7289, 7292, 7295, 7301
    } ;

static yyconst short int yy_def[2149] =
    {   0,
     2140,    1, 2140, 2140, 2140, 2140, 2140, 2141, 2140, 2140,
     2140, 2142, 2140, 2142, 2143, 2144, 2144, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144,   17, 2140, 2140, 2140, 2140, 2141,
     2140, 2142, 2140, 2140, 2145, 2146, 2145,   17, 2144,   17,
     2146, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144,   45, 2144, 2144, 2147, 2145,
     2146, 2146, 2146, 2143,   60, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2146, 2144, 2144, 2144, 2144, 2147, 2148, 2148,  113, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144,  223, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,  181,
     2144, 2144, 2144, 2144,  188, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     1419, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,

     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,
     2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144, 2144,    0,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140
    } ;

static yyconst short int yy_nxt[7369] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,    4,   15,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   18,   19,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       30,   30,   36,   37,   38,   39,   40,   30,   41,   42,
       43,   44,   45,   30,   30,   30,   30,   46,   47,   48,
       53,   61,   57,   61,   57,   54,   56,   57,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   61,   57, 2140,
       61,   57,   61,   57, 2140,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,  188,

       62,  188,   63,   61,   57,   78,   61,   57,   74,   60,
       56,   57,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   64,   66,   67,   61,   57,   70,   65,   68,   75,
       76,   61,   57,   61,   57,   52,   69,   71,  135,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,  187,   79,   72,   61,   57,  187,   77,
       82,  114,   73,   84,   57,   90,   85,   61,   57,   61,
       57,   80,   81,  109,   86,  104,   51,   87,  118,   83,
       88,   89,   49,   61,   57,  105,   51,   91,  116,  119,
      117,   92,   61,   57,   93,   61,   57,   94,   49,   61,

       57,   95, 2140,   97, 2140,   98,   96,   99,  123,   61,
       57, 2140,  120, 2140,  121,   61,   57,  100,   61,   57,
      101,  102,  103,   61,  122,  106,  106,  106,  106,  106,
      106,  106,  106,  106,   61,   57,   61,   57,   61,   57,
      124,   61,   57,   61,   57,   61,   57,  107,  181,  125,
       61,   57,  126,   61,   57,  127, 2140,  130,   61,   57,
     2140,  108,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  128,   59,  131,  139,  137,  134,  129,   61,   57,
      132,  148,  133, 2140,  113,   61,   59,  115,  115,  115,
      115,  115,  115,  115,  115,  115, 2140,  136,   61,   57,

       61,   57,   61,   57,  115,  115,  115,  115,  115,  115,
      115,   61,   57,   61,   57,   61,   57,  140,   61,   57,
     2140,  143,  141,   61,   57,   61,   57, 2140,   61,   57,
      138,  147,   61,   57,  150,   61,   57,  144,  142,   61,
       57,  145,  146,   61,   57,   61,   57,  149,  158, 2140,
      151,  153,   61,   57,  154,  155,  152,  157, 2140,  162,
      159,   61,   57,  167,  156,  168,   61,   57,  160,   61,
       57,  164,   61,   57, 2140,  165,  163, 2140,   61,   57,
       61,   57,  166,  161,   61,   57,  171, 2140,  169,  174,
     2140,  176,   61,   57,  172, 2140,  170,  177,   61,   57,

       61,   57,   61,   57,  180, 2140,  173,  175,   61,   57,
      178,  179,   61,   57,   61,   57, 2140,  183,   61,   57,
      190,  182,   61,   57,   61,   57, 2140,   61,   57,   61,
       57, 2140,  193,  184,   61,   57,  192,  191,  200,  185,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  203,
      194,  207, 2140,   61,   57,  201,  205,   61,   57, 2140,
      202,  206,  113,  188, 2140,  188,   61,   57,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  195, 2140,  196,
      197,   61,   57,  198,  209,   61,   57,  204,   61,   57,
     2140,  199,   61,   57,   61,   57,   61,   57,   61,   57,

       61,   57,   61,   57,  208,   61,   57,   61,   57,  210,
       61,   57,  211,   61,   57,   61,   57,  215,   61,   57,
       61,   57,   61,   57,  216, 2140,  213,   61,   57,  222,
       61,   57, 2140,  212,  214,  218, 2140,  217,  220,  223,
      230,  225,   61,   57,  224,  219,   61,   57,   61,   57,
     2140,  221,   61,   57,  226, 2140,  228,   61,   57,  229,
      227,   61,   57,   61,   57,   61,   57,   61,   57, 2140,
      232,  233,   61,   57, 2140,   61,   57,   61,   57,  231,
     2140,  236, 2140,  237,   61,   57,   61,   57,  238,   61,
       57, 2140,  234,   61,   57, 2140,  235, 2140,   61,   57,

      239,   61,   57,  242,   61,   57,   61,   57,  243,  249,
     2140,  240,  241,  244, 2140,  245,  246,  250,   61,   57,
      251,   61,   57,  252, 2140,  255,   61,   57, 2140,  253,
     2140,  247,  248,   61,   57,   61,   57,   61,   57,   61,
       57,  257, 2140,  254,   61,   57,   61,   57,   61,   57,
      258,  256,   61,   57,  260,   61,   57,   61,   57,  261,
      262, 2140,   61,   57,  265,  259,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  263, 2140,  272, 2140,  264,
     2140,  266,   61,   57,  268,  267,  274,  271, 2140,  269,
       61,   57,   61,   57,  273,   61,   57,   61,   57,   61,

       57, 2140,   61,   57,   61,   57,   61,   57, 2140,   61,
       57, 2140,   61,   57,   61,   57,   61,   57,  277, 2140,
      276,   61,   57,   61,   57,   61,   57, 2140,  283,  278,
      285,   61,   57,  279,  287,  280,  282,  284,  281, 2140,
      289,   61,   57,  291,  286,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140,  288,  292,
      290,   61,   57,   61,   57,  293,   61,   57, 2140,  295,
     2140,  296,   61,   57,   61,   57, 2140,  298,  294,  299,
       61,   57,   61,   57, 2140,  306,  297,  301,  300,  302,
       61,   57,  303, 2140,   61,   57,   61,   57, 2140,  304,

     2140,  305,  308,   61,   57,  326,  327,  328, 2140,  329,
      309, 2140,  307,   61,   57,   61,   57,  330, 2140,  331,
     2140,  334,  332,  333,   59, 2140,  319, 2140,  320,  310,
       61,   57,  325,   61,   57, 2140,  321, 2140,  322,  337,
     2140,  323, 2140,  324,   61,   57,   61,   57,   61,   57,
      336,  311,  312,  313,  314,   61,   57, 2140,   61,   57,
       61,   57, 2140,  315, 2140,  316,   61,   57,  317,  318,
       61,   57,  335,   61,   57,   61,   57, 2140,  338,  341,
      339,   61,   57,   61,   57,  340,  342,   61,   57,   61,
       57,  343, 2140,   61,   57, 2140,  346,  345,   61,   57,

       61,   57, 2140,  344, 2140,  348,   61,   57, 2140,  350,
     2140,  349,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57, 2140,  347,  351,   61,   57, 2140,  354, 2140,
      355, 2140,  352,   61,   57, 2140,  357,  358,  353,  360,
      361,  356,  362, 2140,  366,   61,   57,   61,   57,   61,
       57,  359, 2140,  365, 2140,  363,   61,   57,  364,   61,
       57,   61,   57,   61,   57,  368,  369, 2140,  370,   61,
       57,   61,   57,  367,   61,   57,  371,  372,   61,   57,
      373,  383,  376,  374, 2140,  375, 2140,   61,   57,  378,
      379,  380, 2140,  387,  377,   61,   57, 2140,  385,  384,

       61,   57,   61,   57,   61,   57,  381, 2140,  382,  388,
       61,   57,  386,   61,   57,   61,   57,   61,   57, 2140,
      389,   61,   57,   61,   57,  390,   61,   57,  392,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 2140,  397,  391,  393,   61,   57,  394,   61,   57,
       61,   57,  395,   61,   57,  398,  396,   61,   57, 2140,
      403,  399,  400,   61,   57, 2140,  402, 2140,  405,  406,
      401,  404,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 2140,  408, 2140,  407,   61,   57,
       61,   57,   61,   57,  409,   61,   57,   61,   57, 2140,

      411, 2140,   61,   57, 2140,  410,   61,   57,   61,   57,
     2140,  413,  414, 2140,  412,  418, 2140,  419,   61,   57,
      415, 2140,  421,  423, 2140,  416,  422, 2140,  425,  417,
       61,   57,   61,   57,   61,   57, 2140,  420,   61,   57,
      424, 2140,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57, 2140,  426, 2140,   61,
       57,   61,   57,   61,   57,  428,  442,   61,   57,  427,
      431,   61,   57,  432,  434,  430, 2140,  429,  433,  440,
     2140,   61,   57,  441,  436,  443,  437,   61,   57,  439,
      438,  435,   61,   57,  444,   61,   57, 2140,  448,   61,

       57,  445,  449, 2140,  450,   61,   57,  446,  447,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,  451,
       61,   57, 2140,  453,   61,   57,  454,   61,   57,  456,
      452,   61,   57,  455, 2140,  461, 2140,  462,   61,   57,
     2140,  463, 2140,  457, 2140,  458, 2140,  459, 2140,  466,
     2140,  460,   61,   57,  464,   61,   57, 2140,  465,   61,
       57,   61,   57, 2140,  467,   61,   57,   61,   57, 2140,
       61,   57,   61,   57,   61,   57,   61,   57,  468,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,  472,
       61,   57,  476,  469,   61,   57,  470, 2140,  471, 2140,

      477, 2140,   61,   57,   61,   57,  473,  474,  475,   61,
       57,   61,   57,  478, 2140,  482, 2140,  480,  479, 2140,
       61,   57,   61,   57,  481,  483,  484,   61,   57,  487,
      488,   61,   57,   61,   57, 2140,  485,   61,   57,   61,
       57, 2140,   61,   57,   61,   57, 2140,  486,  489,   61,
       57,  491, 2140,  492, 2140,  490,  494,   61,   57, 2140,
       61,   57,  493,   61,   57,  504,   61,   57,   61,   57,
       61,   57, 2140,  509, 2140,  505,  503,   61,   57,   61,
       57,   61,   57,  495,  506,  507,   61,   57,  496,  497,
     2140,  508,  513, 2140,  498,  499,  500,  512,  501,  502,

      510,   61,   57,  516, 2140,  515,  511, 2140,  514, 2140,
      518,   61,   57,   61,   57,   61,   57, 2140,  523, 2140,
      517,  519,   61,   57,   61,   57,   61,   57, 2140,   61,
       57,   61,   57,   61,   57,   61,   57,  521, 2140,  522,
     2140,   61,   57,   61,   57,  520, 2140,  524,  525, 2140,
      530,  527,  528, 2140,   61,   57,   61,   57, 2140,  532,
       61,   57, 2140,  526,  529,  533,   61,   57,  531,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 2140,  536,   61,   57, 2140,  534,  535,  538,   61,
       57,  540,   61,   57, 2140,  542, 2140,  541,  537,   61,

       57,   61,   57,   61,   57,   61,   57,   61,   57,  539,
      546,  545,   61,   57,  543, 2140,  547,  544,   61,   57,
      549,   61,   57, 2140,  551, 2140,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,  548,  550,   61,   57,
       61,   57,   61,   57, 2140,  552,  554,   61,   57,  553,
      555, 2140,  556,   61,   57,   61,   57,  559, 2140,  558,
       61,   57,   61,   57, 2140,   61,   57,   61,   57,  557,
       61,   57,  561,   61,   57,  563,  560,   61,   57,  562,
     2140,  565, 2140,   61,   57,   61,   57,   61,   57,   61,
       57,  572,  564,  568,   61,   57,  571,  566, 2140,  567,

      569,  573, 2140,  570,   61,   57,  574,  575,   61,   57,
       61,   57,  577,   61,   57, 2140,  576,   61,   57, 2140,
       61,   57,   61,   57,   61,   57,   61,   57,  578,   61,
       57,  579,  580, 2140,  583, 2140,  582,   61,   57,   61,
       57, 2140,  581,  586,  587, 2140,  584,   61,   57,   61,
       57,  590,   61,   57, 2140,   61,   57, 2140,  588, 2140,
      585,   61,   57,  589,   61,   57,   61,   57,  596,   61,
       57,   61,   57,  592,   61,   57,  594,   61,   57,   61,
       57,  591,  595, 2140,   61,   57,   61,   57,  598,   61,
       57,  593,   61,   57,  597,   61,   57,  599,   61,   57,

      601,   61,   57, 2140,  600,   61,   57,  604,  602,   61,
       57,   61,   57,   61,   57,  603,  605,   61,   57,  606,
       61,   57,   61,   57,   61,   57, 2140,  607, 2140,  609,
      610, 2140,  608, 2140,  611,   61,   57,  614, 2140,  612,
     2140,  616,  613,   61,   57,   61,   57, 2140,  618,  615,
      617,   61,   57,   61,   57,   61,   57,  620,   61,   57,
     2140,  619,   61,   57, 2140,   61,   57,   61,   57,   61,
       57, 2140,  621,   61,   57,   61,   57, 2140,  623,  622,
       61,   57, 2140,  626,   61,   57,  627,  628,  624,   61,
       57, 2140,  625,   61,   57,  631,  632,  633,   61,   57,

       61,   57,  629, 2140,  637,   61,   57,  634,  630,   61,
       57, 2140,   61,   57,   61,   57, 2140,  635,  636, 2140,
      641,  638, 2140,  642, 2140,  640,   61,   57,   61,   57,
      643,  639,  647,   61,   57,   61,   57,  644,  645, 2140,
      646, 2140,  648, 2140,   61,   57,  649,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140,   61,   57,
       61,   57,  650,   61,   57,   61,   57,  651,  654, 2140,
      655,   61,   57,  656, 2140,  653, 2140,  652,   61,   57,
       61,   57, 2140,  657,  663, 2140,  661,   61,   57,   61,
       57,  658,   61,   57,  659,  660,  662,   61,   57,  665,

       61,   57,  664,   61,   57,   61,   57,   61,   57,  668,
      669,  670,  671,  672,  666,   61,   57, 2140,  667,   61,
       57,  673,   61,   57,  676,   61,   57,  674, 2140,  683,
     2140,  677,  675,  678,   61,   57,   61,   57, 2140,  681,
     2140,  679,   61,   57,  682, 2140,   61,   57,  680, 2140,
       61,   57, 2140,  684,   61,   57,   61,   57, 2140,  685,
       61,   57,  686, 2140,  688,   61,   57, 2140,  689,   61,
       57,   61,   57,  687,  690,  692,   61,   57,   61,   57,
     2140,  694,   61,   57,   61,   57, 2140,  691,   61,   57,
     2140,  693, 2140,   61,   57,   61,   57,  697,  695,   61,

       57, 2140,  696,   61,   57,   61,   57,  707,   61,   57,
      706, 2140,  710, 2140,  709,  708, 2140,  714, 2140,  713,
       61,   57,   61,   57,  698,  699,  712,  711,  700,   61,
       57,   61,   57,  722, 2140,  701,   61,   57,  702, 2140,
      715,  703,  704,  705, 2140,  716,  717,  718,  719,  723,
       61,   57,   61,   57,   61,   57,  725,  720,   61,   57,
      721, 2140,   61,   57,   61,   57,   61,   57,   61,   57,
      724,   61,   57,   61,   57,   61,   57, 2140,  728,   61,
       57, 2140,   61,   57,  726,  727,  730, 2140,  731,   61,
       57,  734,  729,  735,   61,   57,   61,   57,  733,   61,

       57,  732,  739,   61,   57,   61,   57,   61,   57,   61,
       57,  738, 2140,  736,   61,   57, 2140,  737,   61,   57,
       61,   57,  742,   61,   57,  744,  743,   61,   57,   61,
       57,  740, 2140,   61,   57,  741,   61,   57,   61,   57,
     2140,  745,  746,  748,   61,   57,   61,   57,  747,   61,
       57,   61,   57, 2140,  758,  750, 2140,  749,  754, 2140,
      751,  752,   61,   57,  755, 2140,  756, 2140,  757,   61,
       57,  759,   61,   57,  753,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 2140,
       61,   57,   61,   57,  760,   61,   57,   61,   57,  761,

     2140,  765,   61,   57, 2140,  767,  768,   61,   57,   61,
       57,  762,  763, 2140,  769,  766,  764, 2140,  770,  772,
      773,   61,   57,  771,  774,   61,   57,   61,   57,  776,
      777,  775,   61,   57,   61,   57,   61,   57,   61,   57,
     2140,   61,   57, 2140,  779,   61,   57,  780, 2140,  782,
       61,   57,  778,   61,   57,   61,   57, 2140,   61,   57,
      784,  786, 2140,  781,  783, 2140,   61,   57,   61,   57,
       61,   57,   61,   57, 2140,   61,   57,  785, 2140,  787,
      790, 2140,   61,   57, 2140,  789,  791,   61,   57,  788,
       61,   57,  792, 2140,  793,  795,   61,   57,   61,   57,

       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2140,  797,  794,  796,   61,   57,   61,   57,  799,   61,
       57,   61,   57, 2140,   61,   57,   61,   57,   61,   57,
      798,   61,   57,   61,   57,   61,   57, 2140,  800,  804,
      803,  807,  801,  802,  805,  808,   61,   57,   61,   57,
      809,  806,  811,   61,   57,   61,   57,  810,   61,   57,
     2140,  813,  812,  814,   61,   57,   61,   57,   61,   57,
       61,   57,  815,  817,   61,   57,  816,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 2140,
      824,  819,   61,   57, 2140,  818,  822, 2140,  825,  821,

       61,   57,   61,   57, 2140,  829, 2140,  820,   61,   57,
     2140,  823,   61,   57,  827,   61,   57,  826,  828,   61,
       57, 2140,  830,   61,   57,   61,   57,  831,   61,   57,
       61,   57,  835,   61,   57,   61,   57,   61,   57, 2140,
      832,  833,   61,   57,  834,   61,   57,  838,  839,   61,
       57,   61,   57, 2140,  836, 2140,  840,  837,   61,   57,
       61,   57,  841, 2140,  842,  843,  844,   61,   57,  845,
       61,   57,  848, 2140,  847, 2140,  850,  846,   61,   57,
       61,   57,   61,   57,   61,   57,  849,   61,   57,  853,
       61,   57,   61,   57,   61,   57,  851,   61,   57, 2140,

      852, 2140,   61,   57, 2140,  858,  854,  855,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,  856, 2140,
      857,  863,  865, 2140,  859,  860,  861, 2140,  862, 2140,
      864,   61,   57,   61,   57, 2140,  866,   61,   57,   61,
       57,   61,   57,   61,   57, 2140,  868, 2140,  867, 2140,
      871,  870, 2140,  869,   61,   57, 2140,   61,   57,   61,
       57,  875,   61,   57,   61,   57, 2140,  872,   61,   57,
      874,  873,   61,   57,   61,   57, 2140,  876,   61,   57,
     2140,  878,   61,   57,   61,   57,  881,  880,   61,   57,
       61,   57,  884,  877,  879,  885,   61,   57,  886,   61,

       57,   61,   57,  882,   61,   57,  887,  883,   61,   57,
     2140,   61,   57,   61,   57,  888,   61,   57, 2140,   61,
       57,   61,   57, 2140,  891,   61,   57,  889,  894,  890,
       61,   57,  892,   61,   57,  893,   61,   57,  897,  901,
       61,   57,  895,   61,   57,  896,  898,   61,   57,  899,
       61,   57,  900,  902,   61,   57,   61,   57,  903,  906,
       61,   57,   61,   57,   61,   57,   61,   57, 2140,  904,
     2140,   61,   57,   61,   57, 2140,  905,  907,   61,   57,
       61,   57,   61,   57,  909,  908,  911,   61,   57,   61,
       57,   61,   57,   61,   57,  912,   61,   57,  910,  913,

       61,   57,  915,   61,   57,  916,   61,   57,   61,   57,
      914, 2140,  919, 2140,  917, 2140,  922,   61,   57, 2140,
      923, 2140,   61,   57,  918,   61,   57, 2140,  920,   61,
       57, 2140,  926,  921,   61,   57,   61,   57,   61,   57,
       61,   57,  924,   61,   57,  925,  928,   61,   57, 2140,
       61,   57, 2140,   61,   57,   61,   57,  927,  941,  929,
     2140,  933, 2140,  930,  937,   61,   57,  931, 2140,   61,
       57,  938, 2140,  934,  940,  932,  935, 2140,  936,   61,
       57, 2140,  939,   61,   57,   61,   57,   61,   57,   61,
       57, 2140,  942,  944,   61,   57,   61,   57,   61,   57,

       61,   57,  943,  946,   61,   57,   61,   57,   61,   57,
       61,   57,  949,  945,   61,   57,   61,   57,  952,   61,
       57,   61,   57,  951,  948, 2140,  947, 2140,  954,   61,
       57,  950,  956,   61,   57,  957, 2140,  955, 2140,  953,
     2140,  960,  959,   61,   57,   61,   57, 2140,  958, 2140,
       61,   57,   61,   57,   61,   57,   61,   57, 2140,   61,
       57,  961, 2140,  963,   61,   57,  962,   61,   57,  964,
      965,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2140,  967,   61,   57,  966,
     2140,  971,   61,   57,   61,   57, 2140,  968,  969,   61,

       57,  970,   61,   57,  972,   61,   57,  979,  975,   61,
       57,  973,   61,   57,  974,  977,  976,   61,   57,  981,
      978,   61,   57,  982, 2140,  983,   61,   57, 2140,  980,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,  984,   61,   57,   61,   57, 2140,  985,  986,
     2140,  990,  987,   61,   57,   61,   57,  989, 2140,  988,
       61,   57,  994, 2140,   61,   57, 2140,  995,   61,   57,
      991,   61,   57,  992,  993,  997,   61,   57,  996,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 1004,
     2140,  998, 1000,  999, 1002, 2140, 1001,   61,   57, 2140,

     1003,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57, 1007, 1006, 2140, 1005,   61,   57, 1009,
     2140, 1008,   61,   57, 2140,   61,   57, 1011,   61,   57,
     1012,   61,   57,   61,   57,   61,   57, 1016, 1010,   61,
       57,   61,   57, 2140, 1013,   61,   57, 2140, 1014, 1017,
       61,   57, 2140, 1015, 1018, 1023,   61,   57, 2140, 1022,
       61,   57, 2140, 1024, 1020, 2140, 1021,   61,   57,   61,
       57, 1019,   61,   57,   61,   57,   61,   57, 1025,   61,
       57, 1027,   61,   57, 1026,   61,   57, 1031,   61,   57,
     1028,   61,   57,   61,   57, 2140, 1037, 1029,   61,   57,

     1030,   61,   57, 1033,   61,   57, 2140, 1032, 1038, 1034,
       61,   57, 1035, 2140, 1041, 1036,   61,   57, 1039,   61,
       57, 2140, 1040, 2140, 1042,   61,   57,   61,   57, 1044,
     1046, 1043,   61,   57,   61,   57,   61,   57,   61,   57,
     2140, 1045,   61,   57, 2140,   61,   57, 2140, 1047,   61,
       57, 2140, 1048,   61,   57, 2140,   61,   57, 1050, 1049,
       61,   57,   61,   57, 1053, 1056, 1051,   61,   57,   61,
       57,   61,   57, 1052, 2140, 1054, 1059,   61,   57, 2140,
     1060, 2140, 1057,   61,   57, 1055,   61,   57,   61,   57,
     2140, 1058,   61,   57, 1063,   61,   57,   61,   57,   61,

       57, 2140, 1062,   61,   57,   61,   57, 1061,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     1064, 1067,   61,   57, 2140, 1065, 2140, 1069, 1071, 2140,
     1068,   61,   57, 1066, 2140,   61,   57, 1070, 2140, 1072,
       61,   57, 1076,   61,   57,   61,   57, 1075, 2140, 1073,
     2140, 1074, 2140, 1077, 1078,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2140,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57, 1079,   61,   57,   61,
       57, 1089,   61,   57,   61,   57, 2140, 1083, 1080, 2140,
     1081, 1084, 2140, 1082,   61,   57,   61,   57,   61,   57,

       61,   57, 1087, 2140, 1086, 1091,   61,   57, 1085,   61,
       57,   61,   57,   61,   57, 1092, 1088, 1090,   61,   57,
       61,   57,   61,   57, 1094, 1099, 1100, 1101, 1102,   61,
       57, 1095, 1093,   61,   57,   61,   57, 2140, 1104, 1096,
       61,   57, 1098, 1097, 1103,   61,   57, 2140, 1109, 1110,
     1111, 1112,   61,   57, 1106, 2140, 1105, 2140, 1108,   61,
       57, 2140, 1113, 1114, 1115, 1116,   61,   57,   61,   57,
     2140, 1107, 1117,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140, 1118,   61,
       57, 1119,   61,   57,   61,   57,   61,   57, 1121, 2140,

       61,   57, 1120,   61,   57, 2140,   61,   57, 2140, 1122,
     2140, 1125, 2140, 1124, 1123,   61,   57,   61,   57,   61,
       57, 2140, 1128, 1127, 1129, 1126, 1131,   61,   57,   61,
       57,   61,   57,   61,   57, 2140, 1130,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 1132,
       61,   57, 1133,   61,   57,   61,   57, 2140,   61,   57,
     1136, 1138, 2140,   61,   57, 1137, 1135, 1140, 2140, 1143,
     1134,   61,   57,   61,   57,   61,   57, 2140, 1139, 1146,
       61,   57, 1141, 1148, 2140, 1144, 1142,   61,   57, 1145,
     1147,   61,   57,   61,   57, 1149,   61,   57, 1151,   61,

       57,   61,   57,   61,   57,   61,   57,   61,   57, 2140,
     1150, 2140, 1152,   61,   57,   61,   57, 1156, 2140, 1157,
       61,   57,   61,   57, 1153, 2140, 1154, 1155, 1158, 1159,
     1160,   61,   57, 1161, 2140, 1163,   61,   57, 1162,   61,
       57,   61,   57, 2140, 1165,   61,   57,   61,   57,   61,
       57, 2140,   61,   57, 1164, 2140, 1167,   61,   57,   61,
       57,   61,   57, 2140,   61,   57,   61,   57, 2140, 1166,
     2140, 1171,   61,   57,   61,   57, 2140, 1169, 1172, 2140,
     1168, 1174, 1175, 2140, 1176, 1170, 2140,   61,   57,   61,
       57, 1173, 1181, 2140, 1178, 1179,   61,   57, 1177, 2140,

     1180,   61,   57,   61,   57,   61,   57,   61,   57, 1182,
     1183,   61,   57,   61,   57, 2140, 1185,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140, 1184, 2140,
     1188, 2140, 1187,   61,   57,   61,   57,   61,   57, 2140,
     1186, 1193, 2140, 1199, 1192, 1189,   61,   57, 1190, 1191,
     1195,   61,   57, 1194,   61,   57, 1198, 1200, 1196, 2140,
       61,   57,   61,   57, 2140, 1197, 1202,   61,   57, 2140,
     1201, 1204,   61,   57,   61,   57,   61,   57,   61,   57,
     1203, 2140, 1207,   61,   57,   61,   57,   61,   57, 2140,
       61,   57, 2140, 1205, 1206, 2140, 1211, 2140, 1210,   61,

       57,   61,   57, 1212, 1208,   61,   57, 1213, 1216, 2140,
     1209,   61,   57, 1214, 1217,   61,   57, 2140,   61,   57,
       61,   57, 1219, 2140, 1215,   61,   57,   61,   57, 1220,
       61,   57,   61,   57,   61,   57, 2140, 1218, 2140, 1222,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2140, 1221, 1223, 1225, 2140,   61,   57, 1224,   61,   57,
     1228,   61,   57, 1226, 2140,   61,   57, 2140, 1227,   61,
       57,   61,   57, 2140, 1231,   61,   57, 1230, 2140, 1229,
       61,   57,   61,   57,   61,   57, 2140, 1232, 1233,   61,
       57,   61,   57, 2140,   61,   57, 2140, 1234, 1235,   61,

       57,   61,   57,   61,   57, 2140, 1236, 2140, 1240, 2140,
     1237,   61,   57, 2140, 1238,   61,   57, 1241, 1243, 1239,
       61,   57, 2140, 1242,   61,   57, 1246,   61,   57, 2140,
     1245, 2140, 1244,   61,   57, 2140,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     1247,   61,   57,   61,   57, 2140, 1252, 1248,   61,   57,
       61,   57, 1255, 1249,   61,   57, 1250, 1251, 1253, 1254,
     2140, 1257, 2140, 1259,   61,   57,   61,   57,   61,   57,
     2140, 1258, 1264, 1256, 1261,   61,   57,   61,   57,   61,
       57, 1260,   61,   57,   61,   57, 1263, 2140, 1262,   61,

       57, 2140,   61,   57, 2140,   61,   57,   61,   57, 1267,
     1271,   61,   57, 1265, 2140,   61,   57,   61,   57,   61,
       57, 1266,   61,   57,   61,   57,   61,   57, 1270,   61,
       57, 1268, 1272, 2140, 1278, 2140, 1269, 1273, 2140, 1274,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2140, 1277, 2140, 1275,   61,   57,   61,   57,   61,   57,
       61,   57, 2140,   61,   57, 2140, 1276, 1285, 2140, 1286,
       61,   57,   61,   57,   61,   57,   61,   57, 2140, 1279,
     2140, 1280,   61,   57,   61,   57, 2140, 1281, 2140, 1282,
     2140, 1283, 1288, 2140, 1284,   61,   57,   61,   57,   61,

       57, 2140, 1291, 2140, 1289,   61,   57, 2140, 1287,   61,
       57, 2140,   61,   57, 2140, 1290, 2140, 1292, 2140, 1293,
       61,   57,   61,   57, 2140,   61,   57,   61,   57, 2140,
       61,   57, 2140, 1294, 1296,   61,   57,   61,   57,   61,
       57, 2140,   61,   57,   61,   57,   61,   57, 1295, 1299,
     1301,   61,   57, 2140,   61,   57, 2140, 1297, 2140, 1302,
     2140, 1298,   61,   57,   61,   57, 1300,   61,   57,   61,
       57, 1306,   61,   57,   61,   57, 1303, 1304, 1308,   61,
       57, 1307,   61,   57, 1305,   61,   57, 1309,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,

       61,   57, 2140, 1311,   61,   57, 1310,   61,   57,   61,
       57,   61,   57, 2140, 1314,   61,   57, 1312, 2140, 1313,
     1318,   61,   57,   61,   57, 1319,   61,   57,   61,   57,
     1317, 2140, 1315, 1316,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2140, 1322,
     1320,   61,   57,   61,   57, 1321, 1324,   61,   57, 2140,
     1323, 2140, 1325,   61,   57, 2140, 1331,   61,   57,   61,
       57, 1327, 1330, 2140, 1328, 1332, 1326,   61,   57,   61,
       57, 1334, 1329,   61,   57, 2140, 1335,   61,   57,   61,
       57,   61,   57, 2140, 1333,   61,   57,   61,   57, 1339,

     1337,   61,   57,   61,   57, 1340, 1336,   61,   57, 1342,
     2140, 1341,   61,   57, 2140, 1343, 2140, 1338,   61,   57,
       61,   57,   61,   57, 2140, 1346,   61,   57, 2140,   61,
       57, 1345, 1344,   61,   57, 1347, 1348,   61,   57, 2140,
     1349, 2140, 1352,   61,   57, 2140, 1350, 2140, 1351,   61,
       57, 2140,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 2140, 1353, 1354, 2140, 1355, 2140,
       61,   57,   61,   57, 1360,   61,   57, 2140, 1356, 2140,
     1357,   61,   57, 2140, 1358, 1359, 1363,   61,   57,   61,
       57, 1362, 1365, 1361, 2140, 1364,   61,   57, 2140, 1370,

     1371, 1372, 1373,   61,   57,   61,   57,   61,   57, 1366,
       61,   57, 1367, 2140, 1369,   61,   57, 2140, 1368, 2140,
     1374, 2140,   61,   57, 2140, 1375, 2140, 1377,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2140, 1379,
       61,   57,   61,   57, 1376, 1380,   61,   57,   61,   57,
     1382,   61,   57, 1378,   61,   57,   61,   57,   61,   57,
     2140, 1381,   61,   57,   61,   57,   61,   57,   61,   57,
     1386, 1383, 2140, 1384,   61,   57,   61,   57, 2140, 1385,
     2140, 1388,   61,   57, 1391, 1387,   61,   57, 1393,   61,
       57, 1389, 1390,   61,   57, 2140, 1394,   61,   57,   61,

       57, 1392, 1396, 2140,   61,   57,   61,   57,   61,   57,
       61,   57, 2140, 1395,   61,   57, 2140, 1399, 2140,   61,
       57,   61,   57, 1397,   61,   57,   61,   57, 1398, 2140,
     1401, 1400, 1402,   61,   57, 2140, 1404, 2140, 1403, 1407,
       61,   57,   61,   57, 2140,   61,   57,   61,   57, 1408,
     1405,   61,   57, 1406, 2140, 1409,   61,   57,   61,   57,
       61,   57, 1413,   61,   57, 1412, 2140, 1410, 1415, 2140,
     1411,   61,   57, 1414, 2140, 1416,   61,   57,   61,   57,
       61,   57, 2140,   61,   57,   61,   57,   61,   57,   61,
       57, 2140, 1424,   61,   57, 1417, 1419,   61,   57,   61,

       57, 1421, 1423,   61,   57, 1418,   61,   57, 1420,   61,
       57,   61,   57,   61,   57,   61,   57, 1422, 2140, 1425,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     1426,   61,   57, 1428,   61,   57, 1427,   61,   57, 1429,
     2140,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 1430,   61,   57, 2140, 1431, 2140, 1432,   61,   57,
     1438, 2140, 1436, 2140, 1433,   61,   57, 2140, 1434,   61,
       57, 1435, 1437, 1439, 2140, 1442, 1440,   61,   57,   61,
       57, 2140,   61,   57, 2140,   61,   57, 2140, 1441, 2140,
     1443,   61,   57, 2140,   61,   57,   61,   57, 2140,   61,

       57,   61,   57, 1444,   61,   57, 2140, 1445,   61,   57,
       61,   57, 1446,   61,   57,   61,   57, 2140, 1447, 1448,
     1449,   61,   57,   61,   57,   61,   57, 1452,   61,   57,
     1450, 1451, 1453,   61,   57,   61,   57,   61,   57, 1454,
       61,   57,   61,   57, 2140, 1455,   61,   57, 1460, 1456,
     1457,   61,   57,   61,   57, 2140, 1458, 2140, 1463, 2140,
     1464,   61,   57, 1459, 1461,   61,   57,   61,   57, 1465,
     2140, 1466, 1462,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 1468, 1467, 2140,   61,   57,
       61,   57, 1471,   61,   57,   61,   57, 1472,   61,   57,

       61,   57,   61,   57, 1469,   61,   57, 2140,   61,   57,
     1470, 1474, 1476,   61,   57,   61,   57, 2140,   61,   57,
     1473,   61,   57, 1475, 1478,   61,   57,   61,   57,   61,
       57, 2140, 1479, 1486, 1477, 1482, 2140, 1480, 1481, 1483,
       61,   57, 2140, 1484,   61,   57,   61,   57, 1487, 1488,
     2140, 1485, 2140, 1489,   61,   57, 1490, 2140, 1491, 2140,
     1492,   61,   57,   61,   57,   61,   57, 2140, 1494,   61,
       57, 2140, 1495,   61,   57, 1493,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2140, 1498,
       61,   57, 1496, 1497,   61,   57,   61,   57, 2140, 1501,

       61,   57,   61,   57,   61,   57, 1507, 2140, 1499, 1504,
     1500, 2140, 1506,   61,   57, 2140, 1502,   61,   57, 1503,
     1509,   61,   57, 2140, 1505,   61,   57,   61,   57,   61,
       57, 2140, 1508,   61,   57, 2140,   61,   57,   61,   57,
     2140, 1510,   61,   57, 2140, 1512,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 1513, 1514,
     1511,   61,   57,   61,   57, 1518, 1519, 1520,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 1516, 2140,
     1521, 1515,   61,   57,   61,   57,   61,   57, 1523,   61,
       57, 2140, 1524, 1522, 2140, 1517,   61,   57, 1525,   61,

       57,   61,   57, 2140, 1529,   61,   57, 2140, 1531, 2140,
     1527,   61,   57, 1526,   61,   57, 2140, 1528,   61,   57,
     1530, 2140, 1534,   61,   57, 1535, 2140, 1533,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 1532,   61,
       57,   61,   57,   61,   57, 1536, 1538, 1537,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
       61,   57, 1563, 1540, 1564, 2140, 1539,   61,   57, 1541,
     1545, 1543,   61,   57, 1544, 2140, 1546, 2140, 1542,   61,
       57, 1547, 1548, 1549, 1550, 1551, 1552, 1553, 1554, 1555,
     1556, 1557, 1558, 1559, 1560, 1561, 1562,   61,   57,   61,

       57,   61,   57,   61,   57, 2140, 1566,   61,   57, 1568,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2140, 1565, 2140, 1567,   61,   57,   61,   57, 2140,   61,
       57,   61,   57,   61,   57,   61,   57, 1569, 1573,   61,
       57,   61,   57,   61,   57, 1571,   61,   57,   61,   57,
     2140, 1572, 1570, 2140, 1574, 1575,   61,   57, 2140, 1578,
       61,   57,   61,   57,   61,   57, 2140, 1577,   61,   57,
     1576,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57, 2140, 1580, 1579, 1581,   61,   57, 2140,
     1582,   61,   57,   61,   57, 2140, 1583,   61,   57,   61,

       57, 1588, 2140, 1585,   61,   57,   61,   57,   61,   57,
     1584, 1586, 2140, 1587,   61,   57, 2140, 1590,   61,   57,
       61,   57,   61,   57,   61,   57, 1589, 1592, 1594,   61,
       57, 1591,   61,   57,   61,   57, 2140, 1593, 2140, 1595,
     2140, 1597,   61,   57, 2140,   61,   57, 1598, 2140, 1600,
       61,   57,   61,   57, 1603, 2140, 1605, 1596, 1606, 1599,
       61,   57,   61,   57, 1604, 1610,   61,   57, 1601, 2140,
     1611, 1602, 1607, 2140, 1608,   61,   57,   61,   57, 2140,
     1609,   61,   57,   61,   57, 2140, 1612,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 1615,

       61,   57, 2140, 1614, 1613, 1616,   61,   57,   61,   57,
     2140, 1617, 1618,   61,   57, 1627, 1628, 1629,   61,   57,
       61,   57,   61,   57,   61,   57, 1622, 2140, 1619, 2140,
     1620, 1621,   61,   57,   61,   57, 1623, 1625, 2140, 1624,
     1632,   61,   57, 1633, 1634, 1635,   61,   57,   61,   57,
     1636, 1626, 1630,   61,   57, 2140, 1631,   61,   57, 1638,
     1637,   61,   57,   61,   57, 2140, 1639,   61,   57,   61,
       57, 2140, 1641, 2140, 1642,   61,   57,   61,   57,   61,
       57,   61,   57, 1640,   61,   57,   61,   57,   61,   57,
       61,   57, 1644, 1651,   61,   57, 2140, 1643, 1645, 1647,

     2140, 1649,   61,   57, 1646, 2140, 1650,   61,   57, 2140,
     1648,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2140,   61,   57,   61,   57,
       61,   57,   61,   57, 2140, 1652,   61,   57,   61,   57,
       61,   57, 2140,   61,   57,   61,   57, 1653, 1654, 1656,
       61,   57, 1657,   61,   57, 2140, 1655, 1658, 1659, 1661,
     2140,   61,   57, 2140, 1664,   61,   57, 1660,   61,   57,
     2140, 1662, 1665, 2140, 1663, 1666, 1667,   61,   57,   61,
       57,   61,   57, 2140, 1668, 1669,   61,   57, 2140, 1670,
       61,   57,   61,   57,   61,   57, 1671,   61,   57, 1672,

       61,   57,   61,   57,   61,   57, 1673,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57, 2140, 1675, 1676, 1677, 1678,   61,   57,
       61,   57,   61,   57, 1679,   61,   57,   61,   57,   61,
       57, 2140, 1674, 2140,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 2140,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2140,   61,   57, 1686, 1680,
       61,   57, 1681, 1682, 1684, 1685, 1683, 1687,   61,   57,
     2140, 1690,   61,   57,   61,   57, 2140, 1693, 1694, 1688,

     1689,   61,   57, 2140, 1692,   61,   57,   61,   57,   61,
       57, 2140, 1691,   61,   57, 2140, 1695,   61,   57,   61,
       57,   61,   57, 1697,   61,   57, 2140, 1696,   61,   57,
       61,   57, 1703,   61,   57, 1699,   61,   57, 2140, 1700,
       61,   57,   61,   57, 1698,   61,   57,   61,   57, 2140,
     1701,   61,   57,   61,   57,   61,   57, 1702,   61,   57,
     1704,   61,   57, 2140,   61,   57,   61,   57,   61,   57,
     2140, 1717, 1718, 1705, 1706,   61,   57,   61,   57, 2140,
     1708, 2140, 1707, 2140,   61,   57, 1709, 1715, 1714, 1712,
       61,   57,   61,   57, 1710, 1713, 1711,   61,   57,   61,

       57,   61,   57,   61,   57, 1716,   61,   57, 1722,   61,
       57,   61,   57,   61,   57, 1719, 1720, 1721, 1723,   61,
       57,   61,   57, 1725, 2140, 1728, 2140, 1727,   61,   57,
     1726,   61,   57, 1730, 1724, 1731, 2140, 1729,   61,   57,
     1733,   61,   57, 1732,   61,   57,   61,   57,   61,   57,
       61,   57, 1734,   61,   57,   61,   57, 2140,   61,   57,
     2140,   61,   57, 1735,   61,   57, 1736,   61,   57,   61,
       57,   61,   57, 2140,   61,   57,   61,   57,   61,   57,
     1737, 1740,   61,   57, 1741,   61,   57, 2140, 1738, 1739,
       61,   57, 1744, 1743, 2140,   61,   57,   61,   57, 2140,

     1746, 2140, 1747, 2140, 1742, 1745,   61,   57, 1748,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 1749, 2140,   61,   57, 2140,   61,   57, 2140, 1750,
     1751,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 1754,   61,   57,   61,   57, 1752, 1759, 1757, 1755,
     1753, 1756, 1758,   61,   57,   61,   57,   61,   57, 1760,
       61,   57,   61,   57, 1763,   61,   57, 1761,   61,   57,
     1762,   61,   57, 1768,   61,   57,   61,   57, 1764,   61,
       57,   61,   57,   61,   57, 2140, 1766, 1769, 2140, 1770,
       61,   57,   61,   57, 1765,   61,   57,   61,   57,   61,

       57,   61,   57, 2140, 1767,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140, 1777,   61,
       57,   61,   57,   61,   57, 1774, 2140,   61,   57,   61,
       57,   61,   57, 2140, 1771,   61,   57, 2140, 1778, 1772,
     1773, 1780,   61,   57, 1775, 2140, 1781, 2140, 1776, 1782,
       61,   57, 2140, 1783,   61,   57,   61,   57, 1779, 1784,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     2140,   61,   57, 1794,   61,   57,   61,   57,   61,   57,
       61,   57, 1785,   61,   57, 2140, 1786,   61,   57, 2140,
       61,   57, 2140, 1789, 1787,   61,   57,   61,   57, 1788,

     1790, 1791, 1793, 1792,   61,   57,   61,   57,   61,   57,
     1798, 1796, 2140, 1795, 1799,   61,   57,   61,   57,   61,
       57,   61,   57, 2140, 1797,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140,   61,   57,
     2140, 1802,   61,   57,   61,   57, 1800, 2140, 1801, 1805,
     2140,   61,   57, 1803, 1804,   61,   57,   61,   57, 2140,
     1806,   61,   57, 1816, 1817, 1812, 1807,   61,   57, 2140,
     1808, 2140, 1810, 2140, 1809, 1811, 1814, 1815, 1818,   61,
       57,   61,   57, 2140, 1813,   61,   57, 1819,   61,   57,
     2140,   61,   57,   61,   57,   61,   57,   61,   57,   61,

       57,   61,   57,   61,   57,   61,   57,   61,   57, 1822,
       61,   57,   61,   57, 1821, 1824, 2140, 1825, 1820, 1826,
     1823,   61,   57, 1828,   61,   57, 2140, 1827,   61,   57,
       61,   57,   61,   57,   61,   57,   61,   57, 2140, 1829,
       61,   57, 1830,   61,   57, 2140, 1832, 2140, 1834, 2140,
     1831,   61,   57, 2140, 1833, 1837, 1835, 1836,   61,   57,
       61,   57,   61,   57, 1839,   61,   57,   61,   57,   61,
       57, 1838,   61,   57, 1840, 1842,   61,   57,   61,   57,
       61,   57, 1841,   61,   57,   61,   57,   61,   57,   61,
       57, 1843,   61,   57,   61,   57, 1846, 2140, 1844, 2140,

     1845,   61,   57, 2140,   61,   57,   61,   57, 2140,   61,
       57,   61,   57,   61,   57,   61,   57, 2140, 1847,   61,
       57,   61,   57, 2140, 1848,   61,   57, 1851, 1852, 2140,
     1849, 1856, 1857, 1850, 2140, 1859,   61,   57, 2140, 1853,
     2140, 1854, 2140, 1855,   61,   57,   61,   57, 2140, 1861,
       61,   57, 2140, 1858,   61,   57, 1862,   61,   57, 2140,
     1860, 2140,   61,   57,   61,   57,   61,   57, 1863,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 1865, 1867, 2140, 1868, 2140, 1864, 2140,   61,   57,
     2140, 1866,   61,   57,   61,   57,   61,   57,   61,   57,

       61,   57,   61,   57, 2140, 1869, 2140, 1870,   61,   57,
     1871, 1873,   61,   57, 2140,   61,   57, 2140, 1872, 2140,
     1875,   61,   57, 1876,   61,   57, 1880, 1881,   61,   57,
     2140, 1874,   61,   57, 1882, 1883,   61,   57,   61,   57,
       61,   57,   61,   57, 2140, 1877, 1879, 1885,   61,   57,
     1878, 2140, 1884,   61,   57,   61,   57,   61,   57,   61,
       57, 2140, 1889,   61,   57,   61,   57,   61,   57,   61,
       57, 2140, 1888, 1886,   61,   57, 1887, 1893,   61,   57,
     1890,   61,   57, 2140, 1891,   61,   57,   61,   57, 1894,
       61,   57,   61,   57, 1892,   61,   57, 2140, 1897,   61,

       57, 2140, 1896,   61,   57,   61,   57, 1898, 1895,   61,
       57, 1899,   61,   57, 1903,   61,   57, 2140, 1901, 2140,
     1900,   61,   57,   61,   57, 1902,   61,   57, 1904,   61,
       57, 1905,   61,   57,   61,   57,   61,   57,   61,   57,
     2140, 1906, 2140, 1908,   61,   57,   61,   57,   61,   57,
     2140,   61,   57, 1907,   61,   57, 1909, 2140, 1910,   61,
       57,   61,   57,   61,   57,   61,   57, 2140, 1913, 2140,
     1911, 1915, 1912,   61,   57, 2140, 1914, 1916, 2140, 1917,
     2140, 1918, 2140, 1919, 2140, 1921,   61,   57,   61,   57,
       61,   57,   61,   57, 1920,   61,   57,   61,   57,   61,

       57,   61,   57,   61,   57, 1922, 1923,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140,   61,   57,
     2140, 1925,   61,   57, 2140, 1924, 1926, 1929, 1928,   61,
       57, 2140, 1927,   61,   57,   61,   57, 1933, 2140, 1932,
     1931, 1930, 1934,   61,   57, 2140, 1935,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140,   61,   57,
       61,   57, 2140,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57, 1940,   61,   57, 1939, 1938, 1942,   61,
       57,   61,   57,   61,   57, 1937, 1936,   61,   57, 2140,
     1941, 1943,   61,   57,   61,   57,   61,   57,   61,   57,

     1944,   61,   57,   61,   57, 1947, 1945, 1946, 1949,   61,
       57,   61,   57,   61,   57, 1950, 1952, 2140, 1948, 1951,
       61,   57, 2140, 1955,   61,   57,   61,   57, 2140, 1954,
     1956,   61,   57,   61,   57, 1953,   61,   57,   61,   57,
       61,   57,   61,   57,   61,   57, 2140,   61,   57,   61,
       57, 1959, 2140, 1960,   61,   57, 1961, 1957,   61,   57,
       61,   57, 1958, 2140, 1965,   61,   57, 2140, 1969, 1962,
     2140, 1963,   61,   57,   61,   57, 2140, 1964, 1967, 1966,
       61,   57, 1968, 2140, 1970,   61,   57,   61,   57,   61,
       57, 1972, 2140, 1971,   61,   57,   61,   57,   61,   57,

       61,   57,   61,   57,   61,   57,   61,   57, 1973, 1976,
       61,   57,   61,   57,   61,   57,   61,   57,   61,   57,
     1975,   61,   57, 1974,   61,   57,   61,   57,   61,   57,
       61,   57,   61,   57, 2140, 1977, 2140,   61,   57, 2140,
     1979,   61,   57,   61,   57, 1980, 2140, 1978, 1983, 1981,
       61,   57, 1989,   61,   57,   61,   57, 1982, 1984, 1985,
       61,   57, 1986, 1988, 2140, 1987,   61,   57,   61,   57,
       61,   57,   61,   57, 1991,   61,   57, 2140, 1992, 2140,
     1990,   61,   57,   61,   57, 1993, 1994,   61,   57,   61,
       57, 2140, 1995, 2140, 1996,   61,   57,   61,   57, 1997,

     2140,   61,   57,   61,   57,   61,   57,   61,   57, 2140,
     1998,   61,   57, 2140, 2000, 2140, 1999, 2140, 2003, 2140,
     2001, 2005, 2002, 2006,   61,   57,   61,   57,   61,   57,
     2004, 2140, 2007,   61,   57,   61,   57,   61,   57,   61,
       57, 2008,   61,   57,   61,   57,   61,   57, 2009,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57,   61,
       57, 2140,   61,   57,   61,   57, 2011, 2140, 2013, 2140,
     2010,   61,   57, 2017, 2012,   61,   57,   61,   57, 2016,
     2014, 2140, 2019, 2140, 2018,   61,   57,   61,   57, 2015,
     2020, 2140, 2021,   61,   57,   61,   57, 2022,   61,   57,

     2140, 2024, 2140,   61,   57, 2025,   61,   57,   61,   57,
     2023,   61,   57,   61,   57,   61,   57, 2027, 2140,   61,
       57, 2140, 2028, 2030, 2140, 2029, 2026, 2140, 2032,   61,
       57,   61,   57, 2034, 2140, 2037,   61,   57, 2033,   61,
       57, 2031, 2035,   61,   57,   61,   57,   61,   57,   61,
       57, 2140, 2036,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2140, 2038,   61,
       57, 2140, 2040,   61,   57,   61,   57, 2039,   61,   57,
     2140, 2042,   61,   57,   61,   57, 2140,   61,   57, 2140,
     2041, 2047, 2043,   61,   57, 2045, 2048, 2046, 2044,   61,

       57,   61,   57, 2140, 2049, 2140, 2052, 2053, 2140, 2050,
     2051,   61,   57, 2054,   61,   57,   61,   57,   61,   57,
       61,   57, 2140,   61,   57,   61,   57, 2140, 2055,   61,
       57,   61,   57, 2140, 2056,   61,   57,   61,   57,   61,
       57, 2058, 2060, 2059, 2061,   61,   57,   61,   57, 2057,
       61,   57,   61,   57, 2062,   61,   57, 2064,   61,   57,
     2140, 2063,   61,   57, 2065,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2066, 2140, 2069,
       61,   57, 2071, 2068, 2140,   61,   57,   61,   57, 2067,
     2140,   61,   57, 2074, 2070,   61,   57,   61,   57, 2072,

       61,   57, 2076,   61,   57, 2140, 2073, 2077,   61,   57,
     2075, 2078,   61,   57, 2140, 2079, 2140, 2080, 2081, 2140,
     2082,   61,   57,   61,   57,   61,   57, 2083,   61,   57,
       61,   57, 2085,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57, 2087,   61,   57, 2140, 2084,   61,   57,
       61,   57, 2140, 2086,   61,   57, 2089, 2140,   61,   57,
       61,   57, 2140, 2090, 2088, 2091,   61,   57, 2093,   61,
       57, 2092, 2140, 2096, 2140, 2094, 2140, 2097, 2098, 2095,
       61,   57,   61,   57, 2140,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 2099,

       61,   57, 2101,   61,   57,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57, 2100, 2102,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57, 2103, 2106, 2140,
     2107, 2104,   61,   57, 2140, 2108,   61,   57, 2105,   61,
       57,   61,   57,   61,   57,   61,   57, 2115, 2109, 2140,
     2111, 2140, 2110, 2140, 2112, 2140, 2116, 2113, 2140, 2114,
       61,   57,   61,   57,   61,   57,   61,   57, 2140, 2118,
     2140,   61,   57, 2119,   61,   57, 2140, 2117,   61,   57,
       61,   57,   61,   57, 2122,   61,   57,   61,   57,   61,
       57,   61,   57,   61,   57,   61,   57,   61,   57, 2121,

     2123, 2120, 2124,   61,   57, 2140, 2126,   61,   57, 2127,
       61,   57,   61,   57, 2140,   61,   57,   61,   57, 2131,
     2128, 2125, 2130,   61,   57, 2140, 2129,   61,   57,   61,
       57,   61,   57, 2140, 2133,   61,   57, 2132,   61,   57,
     2140, 2140, 2140, 2137, 2140, 2140, 2140, 2140, 2140, 2134,
     2140, 2135, 2136, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2138, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2139,   50,   50,   50,   50,   50,   50,   50,
       50,   55, 2140, 2140,   55,   55,   55,   55,   59,   59,
       59,   59,   59,  110,  110,  110,  110,  112,  112,  112,

      186, 2140,  186,  275, 2140, 2140,  275,    3, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140
    } ;

static yyconst short int yy_chk[7369] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       15,   26,   26,   27,   27,   15,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   30,   30,  114,
       34,   34,   59,   59,  114,   37,   37,  110,  110,  132,
      132,   29,   29,   28,   28,   78,   78,   35,   35,  187,

       27,  187,   27,   31,   31,   37,   32,   32,   34,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   28,   29,   29,   33,   33,   32,   28,   31,   35,
       35,   36,   36,   38,   38, 2142,   31,   32,   78,   39,
       39,   41,   41,   40,   40,   64,   64,   44,   44,   62,
       62,   63,   63,  186,   38,   33,   65,   65,  109,   36,
       39,   57,   33,   40,   55,   41,   40,   42,   42,   69,
       69,   38,   38,   52,   40,   44,   50,   40,   64,   39,
       40,   40,   49,   43,   43,   44,    8,   42,   62,   65,
       63,   42,   66,   66,   42,   67,   67,   42,    5,   68,

       68,   42,  188,   43,  188,   43,   42,   43,   69,   70,
       70,  189,   66,  189,   67,   71,   71,   43,   72,   72,
       43,   43,   43,   45,   68,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   74,   74,   73,   73,   75,   75,
       70,   76,   76,   77,   77,   82,   82,   45,  106,   71,
       80,   80,   72,   87,   87,   73,    3,   74,   79,   79,
        0,   45,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   73,  106,   75,   82,   80,   77,   73,   83,   83,
       76,   87,   76,    0,   56,   60,  106,   60,   60,   60,
       60,   60,   60,   60,   60,   60,    0,   79,   81,   81,

       84,   84,   85,   85,   60,   60,   60,   60,   60,   60,
       60,   86,   86,   88,   88,   89,   89,   83,   90,   90,
        0,   85,   84,   91,   91,   92,   92,    0,   93,   93,
       81,   86,   94,   94,   89,   98,   98,   85,   84,   96,
       96,   85,   85,   95,   95,   99,   99,   88,   93,    0,
       89,   90,   97,   97,   90,   91,   89,   92,    0,   96,
       94,  100,  100,   98,   91,   98,  101,  101,   95,  102,
      102,   97,  103,  103,    0,   97,   96,    0,  104,  104,
      105,  105,   97,   95,  107,  107,  101,    0,   99,  102,
        0,  103,  116,  116,  101,    0,  100,  103,  108,  108,

      117,  117,  118,  118,  105,    0,  101,  102,  119,  119,
      103,  104,  120,  120,  122,  122,    0,  108,  123,  123,
      116,  107,  124,  124,  128,  128,    0,  129,  129,  125,
      125,    0,  119,  108,  127,  127,  118,  117,  122,  108,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  125,
      120,  129,    0,  131,  131,  123,  127,  121,  121,    0,
      124,  128,  111,  113,    0,  113,  126,  126,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  121,    0,  121,
      121,  130,  130,  121,  131,  133,  133,  126,  134,  134,
        0,  121,  135,  135,  136,  136,  137,  137,  138,  138,

      139,  139,  140,  140,  130,  141,  141,  142,  142,  133,
      144,  144,  134,  143,  143,  147,  147,  138,  150,  150,
      145,  145,  146,  146,  139,    0,  136,  148,  148,  144,
      149,  149,    0,  135,  137,  141,    0,  140,  143,  145,
      150,  146,  151,  151,  145,  142,  152,  152,  153,  153,
        0,  143,  154,  154,  147,    0,  149,  156,  156,  149,
      148,  155,  155,  157,  157,  158,  158,  159,  159,    0,
      152,  153,  160,  160,    0,  161,  161,  162,  162,  151,
        0,  156,    0,  157,  163,  163,  165,  165,  158,  168,
      168,    0,  154,  164,  164,    0,  155,    0,  166,  166,

      159,  167,  167,  162,  169,  169,  170,  170,  163,  165,
        0,  160,  161,  164,    0,  164,  164,  166,  171,  171,
      167,  172,  172,  168,    0,  170,  173,  173,    0,  169,
        0,  164,  164,  174,  174,  175,  175,  176,  176,  177,
      177,  172,    0,  169,  178,  178,  179,  179,  182,  182,
      173,  171,  180,  180,  175,  183,  183,  184,  184,  176,
      176,    0,  185,  185,  177,  174,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  176,    0,  183,    0,  176,
        0,  178,  190,  190,  180,  179,  185,  182,    0,  180,
      191,  191,  192,  192,  184,  193,  193,  194,  194,  195,

      195,    0,  196,  196,  197,  197,  198,  198,    0,  199,
      199,    0,  200,  200,  201,  201,  202,  202,  191,    0,
      190,  203,  203,  204,  204,  205,  205,    0,  197,  192,
      199,  206,  206,  193,  200,  194,  196,  198,  195,    0,
      202,  207,  207,  204,  199,  208,  208,  209,  209,  210,
      210,  211,  211,  212,  212,  213,  213,    0,  201,  205,
      203,  214,  214,  216,  216,  206,  215,  215,    0,  208,
        0,  209,  217,  217,  218,  218,    0,  212,  207,  213,
      219,  219,  220,  220,    0,  216,  210,  215,  214,  215,
      221,  221,  215,    0,  224,  224,  226,  226,    0,  215,

        0,  215,  218,  223,  223,  225,  225,  225,    0,  225,
      220,    0,  217,  228,  228,  229,  229,  225,    0,  225,
        0,  226,  225,  225,  225,    0,  223,    0,  223,  221,
      222,  222,  224,  227,  227,    0,  223,    0,  223,  229,
        0,  223,    0,  223,  230,  230,  231,  231,  232,  232,
      228,  222,  222,  222,  222,  233,  233,    0,  234,  234,
      235,  235,    0,  222,    0,  222,  236,  236,  222,  222,
      237,  237,  227,  238,  238,  239,  239,    0,  230,  233,
      231,  240,  240,  241,  241,  232,  234,  242,  242,  243,
      243,  235,    0,  244,  244,    0,  239,  238,  245,  245,

      246,  246,    0,  237,    0,  241,  247,  247,    0,  243,
        0,  242,  248,  248,  249,  249,  250,  250,  252,  252,
      251,  251,    0,  240,  244,  253,  253,    0,  246,    0,
      247,    0,  245,  254,  254,    0,  248,  248,  245,  250,
      250,  247,  251,    0,  253,  255,  255,  256,  256,  257,
      257,  249,    0,  252,    0,  251,  258,  258,  251,  259,
      259,  261,  261,  263,  263,  255,  255,    0,  255,  260,
      260,  262,  262,  254,  265,  265,  255,  255,  264,  264,
      255,  261,  257,  255,    0,  256,    0,  266,  266,  260,
      260,  260,    0,  265,  259,  267,  267,    0,  263,  262,

      268,  268,  269,  269,  271,  271,  260,    0,  260,  266,
      272,  272,  264,  273,  273,  274,  274,  276,  276,    0,
      268,  277,  277,  278,  278,  269,  279,  279,  271,  280,
      280,  281,  281,  282,  282,  283,  283,  284,  284,  285,
      285,    0,  277,  269,  272,  286,  286,  273,  287,  287,
      288,  288,  274,  289,  289,  278,  276,  290,  290,    0,
      283,  279,  280,  291,  291,    0,  282,    0,  285,  286,
      281,  284,  292,  292,  293,  293,  294,  294,  295,  295,
      296,  296,  297,  297,    0,  288,    0,  287,  298,  298,
      299,  299,  303,  303,  291,  300,  300,  301,  301,    0,

      293,    0,  302,  302,    0,  292,  304,  304,  305,  305,
        0,  295,  296,    0,  294,  300,    0,  301,  306,  306,
      297,    0,  302,  303,    0,  298,  302,    0,  305,  299,
      307,  307,  308,  308,  309,  309,    0,  301,  310,  310,
      304,    0,  311,  311,  312,  312,  313,  313,  314,  314,
      315,  315,  316,  316,  317,  317,    0,  306,    0,  318,
      318,  319,  319,  320,  320,  308,  319,  321,  321,  307,
      311,  323,  323,  311,  313,  310,    0,  309,  312,  318,
        0,  324,  324,  318,  315,  319,  316,  322,  322,  317,
      316,  314,  325,  325,  320,  326,  326,    0,  323,  327,

      327,  321,  324,    0,  324,  328,  328,  322,  322,  329,
      329,  330,  330,  331,  331,  332,  332,  333,  333,  324,
      334,  334,    0,  326,  335,  335,  326,  337,  337,  328,
      325,  338,  338,  327,    0,  332,    0,  333,  336,  336,
        0,  333,    0,  329,    0,  330,    0,  331,    0,  337,
        0,  331,  339,  339,  334,  340,  340,    0,  336,  341,
      341,  342,  342,    0,  338,  343,  343,  344,  344,    0,
      345,  345,  347,  347,  346,  346,  348,  348,  339,  349,
      349,  350,  350,  351,  351,  352,  352,  353,  353,  343,
      354,  354,  347,  340,  355,  355,  341,    0,  342,    0,

      348,    0,  356,  356,  357,  357,  344,  345,  346,  358,
      358,  359,  359,  350,    0,  354,    0,  352,  351,    0,
      360,  360,  361,  361,  353,  355,  356,  364,  364,  358,
      359,  362,  362,  363,  363,    0,  357,  365,  365,  367,
      367,    0,  368,  368,  369,  369,    0,  357,  360,  371,
      371,  362,    0,  363,    0,  361,  365,  370,  370,    0,
      373,  373,  364,  366,  366,  368,  372,  372,  374,  374,
      375,  375,    0,  371,    0,  369,  367,  376,  376,  378,
      378,  379,  379,  366,  369,  370,  383,  383,  366,  366,
        0,  370,  374,    0,  366,  366,  366,  373,  366,  366,

      372,  377,  377,  376,    0,  375,  372,    0,  374,    0,
      378,  380,  380,  381,  381,  382,  382,    0,  383,    0,
      377,  379,  384,  384,  385,  385,  386,  386,    0,  387,
      387,  388,  388,  389,  389,  390,  390,  381,    0,  382,
        0,  391,  391,  392,  392,  380,    0,  384,  385,    0,
      388,  387,  387,    0,  393,  393,  394,  394,    0,  390,
      395,  395,    0,  386,  387,  391,  396,  396,  389,  397,
      397,  398,  398,  399,  399,  400,  400,  401,  401,  402,
      402,    0,  394,  403,  403,    0,  392,  393,  397,  404,
      404,  398,  405,  405,    0,  400,    0,  399,  395,  406,

      406,  407,  407,  408,  408,  409,  409,  410,  410,  397,
      404,  403,  411,  411,  401,    0,  405,  402,  412,  412,
      407,  413,  413,    0,  409,    0,  414,  414,  415,  415,
      416,  416,  417,  417,  418,  418,  406,  408,  419,  419,
      420,  420,  421,  421,    0,  410,  412,  423,  423,  411,
      414,    0,  415,  422,  422,  426,  426,  418,    0,  417,
      424,  424,  425,  425,    0,  427,  427,  429,  429,  416,
      428,  428,  420,  431,  431,  422,  419,  430,  430,  421,
        0,  423,    0,  432,  432,  433,  433,  434,  434,  435,
      435,  429,  422,  426,  436,  436,  428,  424,    0,  425,

      427,  430,    0,  427,  437,  437,  431,  432,  438,  438,
      439,  439,  434,  440,  440,    0,  433,  441,  441,    0,
      442,  442,  443,  443,  444,  444,  445,  445,  435,  446,
      446,  436,  437,    0,  439,    0,  438,  447,  447,  448,
      448,    0,  437,  442,  443,    0,  440,  449,  449,  452,
      452,  446,  450,  450,    0,  451,  451,    0,  444,    0,
      441,  453,  453,  445,  454,  454,  455,  455,  452,  456,
      456,  458,  458,  448,  457,  457,  450,  459,  459,  460,
      460,  447,  451,    0,  461,  461,  462,  462,  454,  463,
      463,  449,  464,  464,  453,  466,  466,  455,  465,  465,

      457,  467,  467,    0,  456,  468,  468,  460,  458,  469,
      469,  470,  470,  472,  472,  459,  461,  471,  471,  462,
      473,  473,  474,  474,  475,  475,    0,  463,    0,  464,
      465,    0,  463,    0,  466,  476,  476,  469,    0,  467,
        0,  471,  468,  477,  477,  478,  478,    0,  473,  470,
      472,  479,  479,  480,  480,  481,  481,  475,  482,  482,
        0,  474,  483,  483,    0,  484,  484,  485,  485,  486,
      486,    0,  476,  487,  487,  488,  488,    0,  479,  478,
      489,  489,    0,  482,  490,  490,  483,  484,  480,  491,
      491,    0,  481,  492,  492,  487,  488,  488,  493,  493,

      494,  494,  485,    0,  490,  495,  495,  488,  486,  496,
      496,    0,  497,  497,  498,  498,    0,  488,  489,    0,
      494,  491,    0,  494,    0,  493,  499,  499,  500,  500,
      494,  492,  497,  501,  501,  502,  502,  494,  495,    0,
      496,    0,  498,    0,  503,  503,  499,  504,  504,  505,
      505,  506,  506,  507,  507,  508,  508,    0,  509,  509,
      512,  512,  500,  510,  510,  511,  511,  501,  503,    0,
      504,  513,  513,  505,    0,  502,    0,  501,  514,  514,
      515,  515,    0,  506,  512,    0,  510,  516,  516,  517,
      517,  507,  519,  519,  508,  509,  511,  518,  518,  514,

      520,  520,  513,  521,  521,  522,  522,  525,  525,  517,
      517,  517,  517,  517,  515,  523,  523,    0,  516,  524,
      524,  517,  526,  526,  519,  527,  527,  517,    0,  525,
        0,  520,  518,  520,  528,  528,  529,  529,    0,  523,
        0,  521,  530,  530,  524,    0,  531,  531,  522,    0,
      532,  532,    0,  526,  533,  533,  534,  534,    0,  527,
      535,  535,  528,    0,  530,  536,  536,    0,  530,  537,
      537,  539,  539,  529,  531,  532,  540,  540,  541,  541,
        0,  534,  542,  542,  543,  543,    0,  531,  544,  544,
        0,  533,    0,  545,  545,  547,  547,  537,  535,  546,

      546,    0,  536,  538,  538,  550,  550,  540,  556,  556,
      539,    0,  543,    0,  542,  541,    0,  547,    0,  546,
      548,  548,  549,  549,  538,  538,  545,  544,  538,  551,
      551,  552,  552,  550,    0,  538,  553,  553,  538,    0,
      548,  538,  538,  538,    0,  549,  549,  549,  549,  551,
      554,  554,  555,  555,  557,  557,  553,  549,  558,  558,
      549,    0,  559,  559,  560,  560,  561,  561,  562,  562,
      552,  563,  563,  564,  564,  565,  565,    0,  557,  566,
      566,    0,  567,  567,  554,  555,  559,    0,  560,  568,
      568,  563,  558,  564,  569,  569,  570,  570,  562,  571,

      571,  561,  567,  572,  572,  573,  573,  574,  574,  575,
      575,  566,    0,  565,  576,  576,    0,  565,  577,  577,
      578,  578,  571,  579,  579,  573,  572,  580,  580,  582,
      582,  569,    0,  581,  581,  570,  583,  583,  584,  584,
        0,  574,  575,  577,  585,  585,  586,  586,  576,  587,
      587,  588,  588,    0,  587,  579,    0,  578,  583,    0,
      580,  581,  589,  589,  584,    0,  585,    0,  586,  590,
      590,  588,  591,  591,  582,  592,  592,  593,  593,  594,
      594,  595,  595,  596,  596,  597,  597,  598,  598,    0,
      599,  599,  600,  600,  589,  601,  601,  602,  602,  590,

        0,  594,  603,  603,    0,  596,  596,  604,  604,  605,
      605,  591,  592,    0,  596,  595,  593,    0,  596,  597,
      598,  606,  606,  596,  599,  607,  607,  608,  608,  602,
      603,  600,  609,  609,  610,  610,  611,  611,  612,  612,
        0,  613,  613,    0,  605,  614,  614,  606,    0,  608,
      615,  615,  604,  616,  616,  617,  617,    0,  618,  618,
      611,  613,    0,  607,  609,    0,  619,  619,  620,  620,
      621,  621,  622,  622,    0,  623,  623,  612,    0,  614,
      618,    0,  624,  624,    0,  616,  619,  625,  625,  615,
      626,  626,  620,    0,  621,  623,  627,  627,  628,  628,

      629,  629,  630,  630,  631,  631,  632,  632,  633,  633,
        0,  625,  622,  624,  635,  635,  634,  634,  627,  639,
      639,  636,  636,    0,  637,  637,  638,  638,  640,  640,
      626,  641,  641,  642,  642,  643,  643,    0,  628,  633,
      632,  636,  630,  631,  634,  637,  644,  644,  645,  645,
      638,  635,  640,  646,  646,  647,  647,  639,  648,  648,
        0,  642,  641,  643,  649,  649,  650,  650,  651,  651,
      653,  653,  644,  646,  652,  652,  645,  654,  654,  655,
      655,  656,  656,  657,  657,  658,  658,  659,  659,    0,
      653,  648,  660,  660,    0,  647,  651,    0,  653,  650,

      661,  661,  662,  662,    0,  658,    0,  649,  664,  664,
        0,  652,  663,  663,  656,  665,  665,  655,  657,  666,
      666,    0,  659,  667,  667,  668,  668,  660,  669,  669,
      670,  670,  664,  671,  671,  672,  672,  674,  674,    0,
      661,  662,  677,  677,  663,  675,  675,  667,  668,  673,
      673,  676,  676,    0,  665,    0,  668,  666,  678,  678,
      679,  679,  669,    0,  670,  671,  672,  680,  680,  673,
      681,  681,  675,    0,  674,    0,  677,  673,  682,  682,
      683,  683,  684,  684,  685,  685,  676,  686,  686,  680,
      689,  689,  687,  687,  688,  688,  678,  690,  690,    0,

      679,    0,  691,  691,    0,  684,  680,  681,  692,  692,
      693,  693,  694,  694,  695,  695,  697,  697,  682,    0,
      683,  689,  691,    0,  685,  686,  687,    0,  688,    0,
      690,  696,  696,  698,  698,    0,  692,  699,  699,  700,
      700,  701,  701,  702,  702,    0,  694,    0,  693,    0,
      697,  696,    0,  695,  703,  703,    0,  704,  704,  705,
      705,  701,  706,  706,  707,  707,    0,  698,  709,  709,
      700,  699,  708,  708,  710,  710,    0,  702,  711,  711,
        0,  704,  712,  712,  713,  713,  706,  705,  714,  714,
      715,  715,  709,  703,  704,  710,  716,  716,  711,  717,

      717,  718,  718,  707,  719,  719,  712,  708,  720,  720,
        0,  721,  721,  723,  723,  713,  722,  722,    0,  724,
      724,  725,  725,    0,  716,  726,  726,  714,  719,  715,
      727,  727,  717,  728,  728,  718,  729,  729,  721,  724,
      730,  730,  720,  731,  731,  720,  721,  732,  732,  722,
      733,  733,  723,  725,  734,  734,  735,  735,  726,  729,
      736,  736,  737,  737,  739,  739,  738,  738,    0,  727,
        0,  740,  740,  741,  741,    0,  728,  730,  742,  742,
      743,  743,  744,  744,  735,  734,  738,  745,  745,  746,
      746,  747,  747,  748,  748,  739,  749,  749,  736,  740,

      750,  750,  742,  751,  751,  743,  752,  752,  753,  753,
      741,    0,  746,    0,  744,    0,  749,  754,  754,    0,
      750,    0,  755,  755,  745,  756,  756,    0,  747,  757,
      757,    0,  753,  748,  758,  758,  759,  759,  760,  760,
      761,  761,  751,  763,  763,  752,  755,  762,  762,    0,
      764,  764,    0,  765,  765,  766,  766,  754,  765,  756,
        0,  760,    0,  757,  761,  767,  767,  758,    0,  768,
      768,  762,    0,  760,  764,  759,  760,    0,  760,  769,
      769,    0,  763,  770,  770,  771,  771,  772,  772,  773,
      773,    0,  766,  768,  774,  774,  775,  775,  776,  776,

      777,  777,  767,  770,  778,  778,  779,  779,  780,  780,
      781,  781,  773,  769,  782,  782,  783,  783,  776,  784,
      784,  785,  785,  775,  772,    0,  771,    0,  778,  786,
      786,  774,  780,  787,  787,  781,    0,  779,    0,  777,
        0,  785,  784,  788,  788,  789,  789,    0,  782,    0,
      790,  790,  791,  791,  792,  792,  793,  793,    0,  794,
      794,  786,    0,  788,  795,  795,  787,  796,  796,  789,
      790,  797,  797,  798,  798,  799,  799,  800,  800,  801,
      801,  802,  802,  803,  803,    0,  792,  804,  804,  791,
        0,  796,  805,  805,  808,  808,    0,  793,  794,  806,

      806,  795,  807,  807,  797,  809,  809,  804,  800,  810,
      810,  798,  811,  811,  799,  802,  801,  812,  812,  806,
      803,  813,  813,  807,    0,  808,  814,  814,    0,  805,
      815,  815,  816,  816,  817,  817,  818,  818,  819,  819,
      820,  820,  809,  821,  821,  822,  822,    0,  810,  811,
        0,  815,  812,  824,  824,  823,  823,  814,    0,  813,
      825,  825,  819,    0,  826,  826,    0,  821,  829,  829,
      816,  827,  827,  817,  818,  823,  828,  828,  822,  830,
      830,  831,  831,  832,  832,  833,  833,  834,  834,  829,
        0,  824,  826,  825,  827,    0,  826,  835,  835,    0,

      828,  836,  836,  837,  837,  838,  838,  839,  839,  840,
      840,  841,  841,  833,  832,    0,  830,  843,  843,  835,
        0,  834,  842,  842,    0,  844,  844,  837,  845,  845,
      839,  846,  846,  847,  847,  848,  848,  843,  836,  849,
      849,  850,  850,    0,  840,  851,  851,    0,  841,  844,
      852,  852,    0,  842,  845,  848,  853,  853,    0,  847,
      854,  854,    0,  849,  846,    0,  846,  855,  855,  856,
      856,  845,  857,  857,  858,  858,  860,  860,  850,  861,
      861,  852,  859,  859,  851,  862,  862,  855,  863,  863,
      853,  864,  864,  865,  865,    0,  860,  854,  866,  866,

      854,  867,  867,  857,  868,  868,    0,  856,  861,  858,
      869,  869,  858,    0,  864,  859,  870,  870,  862,  871,
      871,    0,  863,    0,  865,  872,  872,  873,  873,  867,
      869,  866,  874,  874,  875,  875,  876,  876,  877,  877,
        0,  868,  878,  878,    0,  879,  879,    0,  870,  880,
      880,    0,  871,  881,  881,    0,  882,  882,  873,  872,
      883,  883,  884,  884,  876,  879,  874,  885,  885,  886,
      886,  887,  887,  875,    0,  877,  882,  888,  888,    0,
      883,    0,  880,  889,  889,  878,  890,  890,  891,  891,
        0,  881,  892,  892,  887,  893,  893,  894,  894,  895,

      895,    0,  886,  896,  896,  898,  898,  885,  897,  897,
      899,  899,  900,  900,  901,  901,  902,  902,  903,  903,
      890,  893,  904,  904,    0,  891,    0,  895,  897,    0,
      894,  905,  905,  892,    0,  906,  906,  896,    0,  898,
      907,  907,  904,  908,  908,  909,  909,  901,    0,  899,
        0,  900,    0,  905,  906,  910,  910,  911,  911,  912,
      912,  913,  913,  914,  914,    0,  915,  915,  916,  916,
      917,  917,  918,  918,  919,  919,  909,  920,  920,  921,
      921,  920,  922,  922,  923,  923,    0,  914,  911,    0,
      912,  915,    0,  913,  924,  924,  925,  925,  926,  926,

      927,  927,  919,    0,  918,  922,  928,  928,  916,  929,
      929,  930,  930,  931,  931,  923,  919,  921,  934,  934,
      933,  933,  932,  932,  925,  932,  932,  932,  932,  935,
      935,  927,  924,  936,  936,  937,  937,    0,  934,  928,
      941,  941,  930,  929,  933,  938,  938,    0,  938,  938,
      938,  938,  942,  942,  936,    0,  935,    0,  937,  939,
      939,    0,  939,  939,  939,  939,  940,  940,  943,  943,
        0,  936,  940,  944,  944,  945,  945,  946,  946,  947,
      947,  948,  948,  949,  949,  950,  950,    0,  940,  951,
      951,  942,  952,  952,  953,  953,  954,  954,  944,    0,

      955,  955,  943,  956,  956,    0,  957,  957,    0,  945,
        0,  949,    0,  948,  946,  958,  958,  959,  959,  960,
      960,    0,  953,  952,  955,  949,  957,  961,  961,  962,
      962,  963,  963,  964,  964,    0,  956,  965,  965,  966,
      966,  967,  967,  968,  968,  970,  970,  969,  969,  958,
      972,  972,  960,  971,  971,  973,  973,    0,  974,  974,
      965,  967,    0,  975,  975,  966,  964,  969,    0,  970,
      963,  976,  976,  977,  977,  978,  978,    0,  968,  973,
      979,  979,  969,  975,    0,  971,  969,  980,  980,  972,
      974,  981,  981,  983,  983,  976,  982,  982,  978,  984,

      984,  985,  985,  987,  987,  986,  986,  989,  989,    0,
      977,    0,  979,  988,  988,  990,  990,  983,    0,  984,
      991,  991,  992,  992,  980,    0,  981,  982,  985,  986,
      987,  993,  993,  988,    0,  990,  994,  994,  989,  995,
      995,  996,  996,    0,  992,  997,  997,  998,  998,  999,
      999,    0, 1000, 1000,  991,    0,  994, 1001, 1001, 1002,
     1002, 1003, 1003,    0, 1004, 1004, 1005, 1005,    0,  993,
        0,  999, 1006, 1006, 1007, 1007,    0,  997, 1000,    0,
      996, 1002, 1002,    0, 1002,  998,    0, 1008, 1008, 1009,
     1009, 1001, 1006,    0, 1003, 1004, 1010, 1010, 1002,    0,

     1005, 1011, 1011, 1012, 1012, 1013, 1013, 1014, 1014, 1007,
     1008, 1015, 1015, 1016, 1016,    0, 1010, 1017, 1017, 1018,
     1018, 1019, 1019, 1023, 1023, 1020, 1020,    0, 1009,    0,
     1014,    0, 1013, 1021, 1021, 1022, 1022, 1024, 1024,    0,
     1012, 1019,    0, 1023, 1018, 1015, 1025, 1025, 1016, 1017,
     1020, 1026, 1026, 1019, 1027, 1027, 1022, 1023, 1021,    0,
     1028, 1028, 1029, 1029,    0, 1021, 1025, 1030, 1030,    0,
     1024, 1026, 1031, 1031, 1032, 1032, 1033, 1033, 1035, 1035,
     1025,    0, 1029, 1034, 1034, 1036, 1036, 1037, 1037,    0,
     1038, 1038,    0, 1027, 1028,    0, 1033,    0, 1032, 1039,

     1039, 1040, 1040, 1034, 1030, 1041, 1041, 1034, 1037,    0,
     1031, 1042, 1042, 1035, 1038, 1043, 1043,    0, 1044, 1044,
     1046, 1046, 1040,    0, 1036, 1045, 1045, 1047, 1047, 1041,
     1048, 1048, 1049, 1049, 1050, 1050,    0, 1039,    0, 1043,
     1051, 1051, 1052, 1052, 1053, 1053, 1054, 1054, 1055, 1055,
        0, 1042, 1044, 1046,    0, 1056, 1056, 1045, 1057, 1057,
     1051, 1058, 1058, 1049,    0, 1059, 1059,    0, 1050, 1060,
     1060, 1061, 1061,    0, 1054, 1062, 1062, 1053,    0, 1052,
     1063, 1063, 1064, 1064, 1065, 1065,    0, 1055, 1056, 1066,
     1066, 1067, 1067,    0, 1068, 1068,    0, 1057, 1059, 1069,

     1069, 1070, 1070, 1071, 1071,    0, 1060,    0, 1065,    0,
     1061, 1072, 1072,    0, 1062, 1073, 1073, 1066, 1068, 1064,
     1074, 1074,    0, 1067, 1075, 1075, 1071, 1076, 1076,    0,
     1070,    0, 1069, 1077, 1077,    0, 1078, 1078, 1079, 1079,
     1080, 1080, 1081, 1081, 1082, 1082, 1084, 1084, 1085, 1085,
     1072, 1083, 1083, 1086, 1086,    0, 1078, 1074, 1087, 1087,
     1088, 1088, 1081, 1075, 1089, 1089, 1076, 1077, 1078, 1078,
        0, 1083,    0, 1086, 1090, 1090, 1091, 1091, 1092, 1092,
        0, 1085, 1092, 1082, 1088, 1093, 1093, 1094, 1094, 1095,
     1095, 1087, 1096, 1096, 1098, 1098, 1091,    0, 1090, 1097,

     1097,    0, 1099, 1099,    0, 1100, 1100, 1101, 1101, 1095,
     1099, 1102, 1102, 1093,    0, 1103, 1103, 1104, 1104, 1105,
     1105, 1094, 1106, 1106, 1107, 1107, 1109, 1109, 1098, 1108,
     1108, 1096, 1100,    0, 1108,    0, 1097, 1103,    0, 1104,
     1110, 1110, 1111, 1111, 1112, 1112, 1113, 1113, 1114, 1114,
        0, 1107,    0, 1105, 1115, 1115, 1116, 1116, 1117, 1117,
     1118, 1118,    0, 1119, 1119,    0, 1106, 1119,    0, 1119,
     1120, 1120, 1121, 1121, 1122, 1122, 1123, 1123,    0, 1113,
        0, 1114, 1124, 1124, 1125, 1125,    0, 1115,    0, 1116,
        0, 1117, 1121,    0, 1118, 1126, 1126, 1127, 1127, 1128,

     1128,    0, 1124,    0, 1122, 1129, 1129,    0, 1120, 1130,
     1130,    0, 1131, 1131,    0, 1123,    0, 1125,    0, 1126,
     1132, 1132, 1133, 1133,    0, 1134, 1134, 1135, 1135,    0,
     1136, 1136,    0, 1128, 1131, 1137, 1137, 1138, 1138, 1139,
     1139,    0, 1140, 1140, 1141, 1141, 1143, 1143, 1130, 1134,
     1136, 1142, 1142,    0, 1144, 1144,    0, 1132,    0, 1137,
        0, 1133, 1145, 1145, 1146, 1146, 1135, 1147, 1147, 1148,
     1148, 1142, 1149, 1149, 1150, 1150, 1138, 1140, 1144, 1151,
     1151, 1143, 1152, 1152, 1141, 1153, 1153, 1147, 1154, 1154,
     1155, 1155, 1156, 1156, 1157, 1157, 1158, 1158, 1159, 1159,

     1160, 1160,    0, 1151, 1161, 1161, 1148, 1162, 1162, 1163,
     1163, 1164, 1164,    0, 1155, 1165, 1165, 1152,    0, 1153,
     1160, 1166, 1166, 1167, 1167, 1161, 1168, 1168, 1169, 1169,
     1159,    0, 1157, 1158, 1170, 1170, 1171, 1171, 1172, 1172,
     1173, 1173, 1174, 1174, 1175, 1175, 1176, 1176,    0, 1166,
     1164, 1177, 1177, 1178, 1178, 1165, 1169, 1179, 1179,    0,
     1167,    0, 1170, 1180, 1180,    0, 1176, 1181, 1181, 1182,
     1182, 1172, 1175,    0, 1173, 1177, 1171, 1183, 1183, 1184,
     1184, 1179, 1174, 1185, 1185,    0, 1180, 1186, 1186, 1187,
     1187, 1188, 1188,    0, 1178, 1189, 1189, 1190, 1190, 1184,

     1182, 1191, 1191, 1193, 1193, 1185, 1181, 1192, 1192, 1187,
        0, 1186, 1194, 1194,    0, 1188,    0, 1183, 1195, 1195,
     1196, 1196, 1197, 1197,    0, 1191, 1198, 1198,    0, 1199,
     1199, 1190, 1189, 1200, 1200, 1192, 1193, 1201, 1201,    0,
     1194,    0, 1197, 1202, 1202,    0, 1195,    0, 1196, 1203,
     1203,    0, 1204, 1204, 1205, 1205, 1206, 1206, 1207, 1207,
     1209, 1209, 1208, 1208,    0, 1198, 1199,    0, 1200,    0,
     1210, 1210, 1211, 1211, 1205, 1212, 1212,    0, 1201,    0,
     1202, 1213, 1213,    0, 1203, 1204, 1208, 1214, 1214, 1216,
     1216, 1207, 1210, 1206,    0, 1209, 1215, 1215,    0, 1215,

     1215, 1215, 1215, 1217, 1217, 1218, 1218, 1219, 1219, 1211,
     1220, 1220, 1212,    0, 1214, 1221, 1221,    0, 1213,    0,
     1216,    0, 1222, 1222,    0, 1217,    0, 1219, 1223, 1223,
     1224, 1224, 1225, 1225, 1226, 1226, 1227, 1227,    0, 1221,
     1228, 1228, 1229, 1229, 1218, 1222, 1230, 1230, 1231, 1231,
     1224, 1232, 1232, 1220, 1233, 1233, 1234, 1234, 1235, 1235,
        0, 1223, 1236, 1236, 1237, 1237, 1238, 1238, 1239, 1239,
     1229, 1225,    0, 1227, 1240, 1240, 1241, 1241,    0, 1228,
        0, 1231, 1242, 1242, 1235, 1230, 1243, 1243, 1237, 1244,
     1244, 1232, 1233, 1245, 1245,    0, 1240, 1246, 1246, 1247,

     1247, 1236, 1242,    0, 1248, 1248, 1249, 1249, 1250, 1250,
     1251, 1251,    0, 1241, 1252, 1252,    0, 1245,    0, 1253,
     1253, 1254, 1254, 1243, 1255, 1255, 1256, 1256, 1244,    0,
     1247, 1246, 1248, 1257, 1257,    0, 1250,    0, 1249, 1253,
     1258, 1258, 1259, 1259,    0, 1260, 1260, 1261, 1261, 1254,
     1251, 1262, 1262, 1252,    0, 1254, 1263, 1263, 1264, 1264,
     1265, 1265, 1258, 1266, 1266, 1257,    0, 1255, 1260,    0,
     1256, 1267, 1267, 1259,    0, 1261, 1268, 1268, 1269, 1269,
     1270, 1270,    0, 1271, 1271, 1272, 1272, 1273, 1273, 1274,
     1274,    0, 1273, 1275, 1275, 1263, 1266, 1276, 1276, 1277,

     1277, 1269, 1271, 1279, 1279, 1265, 1278, 1278, 1267, 1280,
     1280, 1281, 1281, 1282, 1282, 1283, 1283, 1270,    0, 1274,
     1284, 1284, 1285, 1285, 1286, 1286, 1287, 1287, 1288, 1288,
     1275, 1289, 1289, 1277, 1290, 1290, 1276, 1292, 1292, 1278,
        0, 1291, 1291, 1294, 1294, 1293, 1293, 1295, 1295, 1296,
     1296, 1284, 1297, 1297,    0, 1285,    0, 1286, 1298, 1298,
     1292,    0, 1290,    0, 1287, 1299, 1299,    0, 1288, 1300,
     1300, 1289, 1291, 1293,    0, 1297, 1294, 1301, 1301, 1302,
     1302,    0, 1303, 1303,    0, 1304, 1304,    0, 1296,    0,
     1298, 1305, 1305,    0, 1306, 1306, 1307, 1307,    0, 1308,

     1308, 1309, 1309, 1299, 1310, 1310,    0, 1300, 1311, 1311,
     1312, 1312, 1301, 1313, 1313, 1314, 1314,    0, 1302, 1303,
     1304, 1315, 1315, 1316, 1316, 1318, 1318, 1307, 1317, 1317,
     1305, 1306, 1308, 1319, 1319, 1320, 1320, 1321, 1321, 1309,
     1322, 1322, 1323, 1323,    0, 1311, 1324, 1324, 1317, 1312,
     1313, 1325, 1325, 1326, 1326,    0, 1315,    0, 1321,    0,
     1322, 1327, 1327, 1316, 1319, 1328, 1328, 1330, 1330, 1324,
        0, 1325, 1320, 1329, 1329, 1331, 1331, 1332, 1332, 1333,
     1333, 1334, 1334, 1335, 1335, 1327, 1326,    0, 1336, 1336,
     1337, 1337, 1330, 1338, 1338, 1339, 1339, 1331, 1340, 1340,

     1341, 1341, 1343, 1343, 1328, 1342, 1342,    0, 1345, 1345,
     1329, 1333, 1336, 1344, 1344, 1346, 1346,    0, 1347, 1347,
     1332, 1349, 1349, 1335, 1338, 1348, 1348, 1350, 1350, 1351,
     1351,    0, 1339, 1345, 1337, 1342,    0, 1340, 1341, 1343,
     1352, 1352,    0, 1344, 1353, 1353, 1354, 1354, 1346, 1347,
        0, 1344,    0, 1348, 1355, 1355, 1349,    0, 1350,    0,
     1351, 1356, 1356, 1357, 1357, 1358, 1358,    0, 1353, 1359,
     1359,    0, 1354, 1360, 1360, 1352, 1361, 1361, 1362, 1362,
     1363, 1363, 1364, 1364, 1365, 1365, 1367, 1367,    0, 1357,
     1366, 1366, 1356, 1356, 1368, 1368, 1369, 1369,    0, 1361,

     1370, 1370, 1371, 1371, 1372, 1372, 1367,    0, 1359, 1364,
     1360,    0, 1366, 1373, 1373,    0, 1362, 1374, 1374, 1363,
     1369, 1375, 1375,    0, 1365, 1376, 1376, 1377, 1377, 1378,
     1378,    0, 1368, 1379, 1379,    0, 1380, 1380, 1381, 1381,
        0, 1374, 1382, 1382,    0, 1376, 1383, 1383, 1384, 1384,
     1385, 1385, 1386, 1386, 1388, 1388, 1389, 1389, 1377, 1380,
     1375, 1387, 1387, 1390, 1390, 1387, 1387, 1387, 1391, 1391,
     1392, 1392, 1393, 1393, 1394, 1394, 1395, 1395, 1383,    0,
     1388, 1382, 1396, 1396, 1397, 1397, 1399, 1399, 1390, 1398,
     1398,    0, 1391, 1389,    0, 1386, 1400, 1400, 1392, 1401,

     1401, 1402, 1402,    0, 1397, 1403, 1403,    0, 1399,    0,
     1395, 1404, 1404, 1394, 1405, 1405,    0, 1396, 1406, 1406,
     1398,    0, 1402, 1407, 1407, 1403,    0, 1401, 1408, 1408,
     1409, 1409, 1410, 1410, 1411, 1411, 1412, 1412, 1400, 1413,
     1413, 1414, 1414, 1415, 1415, 1404, 1406, 1405, 1416, 1416,
     1417, 1417, 1418, 1418, 1420, 1420, 1422, 1422, 1423, 1423,
     1424, 1424, 1423, 1409, 1423,    0, 1407, 1426, 1426, 1411,
     1417, 1415, 1428, 1428, 1416,    0, 1418,    0, 1413, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1421,
     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1425, 1425, 1427,

     1427, 1429, 1429, 1430, 1430,    0, 1426, 1431, 1431, 1428,
     1432, 1432, 1433, 1433, 1434, 1434, 1435, 1435, 1436, 1436,
        0, 1425,    0, 1427, 1437, 1437, 1438, 1438,    0, 1439,
     1439, 1440, 1440, 1441, 1441, 1442, 1442, 1430, 1436, 1443,
     1443, 1444, 1444, 1445, 1445, 1434, 1446, 1446, 1447, 1447,
        0, 1435, 1433,    0, 1438, 1439, 1448, 1448,    0, 1443,
     1450, 1450, 1449, 1449, 1451, 1451,    0, 1441, 1452, 1452,
     1440, 1453, 1453, 1454, 1454, 1455, 1455, 1456, 1456, 1457,
     1457, 1458, 1458,    0, 1448, 1446, 1449, 1459, 1459,    0,
     1451, 1460, 1460, 1461, 1461,    0, 1452, 1462, 1462, 1463,

     1463, 1458,    0, 1454, 1464, 1464, 1466, 1466, 1465, 1465,
     1453, 1456,    0, 1457, 1467, 1467,    0, 1461, 1468, 1468,
     1469, 1469, 1470, 1470, 1471, 1471, 1460, 1463, 1465, 1472,
     1472, 1462, 1473, 1473, 1474, 1474,    0, 1464,    0, 1466,
        0, 1468, 1475, 1475,    0, 1477, 1477, 1469,    0, 1471,
     1478, 1478, 1476, 1476, 1474,    0, 1476, 1467, 1476, 1470,
     1479, 1479, 1480, 1480, 1475, 1477, 1481, 1481, 1472,    0,
     1478, 1473, 1476,    0, 1476, 1482, 1482, 1483, 1483,    0,
     1476, 1484, 1484, 1485, 1485,    0, 1479, 1486, 1486, 1487,
     1487, 1488, 1488, 1489, 1489, 1490, 1490, 1491, 1491, 1483,

     1492, 1492,    0, 1482, 1481, 1484, 1493, 1493, 1494, 1494,
        0, 1485, 1486, 1495, 1495, 1495, 1495, 1495, 1496, 1496,
     1497, 1497, 1499, 1499, 1500, 1500, 1490,    0, 1487,    0,
     1488, 1489, 1501, 1501, 1502, 1502, 1491, 1493,    0, 1492,
     1497, 1498, 1498, 1498, 1498, 1498, 1503, 1503, 1504, 1504,
     1500, 1494, 1496, 1505, 1505,    0, 1496, 1506, 1506, 1502,
     1501, 1507, 1507, 1508, 1508,    0, 1502, 1509, 1509, 1510,
     1510,    0, 1504,    0, 1505, 1511, 1511, 1512, 1512, 1513,
     1513, 1514, 1514, 1503, 1515, 1515, 1516, 1516, 1517, 1517,
     1518, 1518, 1507, 1517, 1519, 1519,    0, 1506, 1508, 1511,

        0, 1514, 1520, 1520, 1509,    0, 1516, 1521, 1521,    0,
     1512, 1522, 1522, 1523, 1523, 1524, 1524, 1525, 1525, 1527,
     1527, 1526, 1526, 1528, 1528,    0, 1529, 1529, 1531, 1531,
     1530, 1530, 1534, 1534,    0, 1522, 1532, 1532, 1533, 1533,
     1535, 1535,    0, 1536, 1536, 1537, 1537, 1523, 1524, 1526,
     1538, 1538, 1527, 1539, 1539,    0, 1525, 1529, 1530, 1532,
        0, 1540, 1540,    0, 1533, 1541, 1541, 1531, 1542, 1542,
        0, 1532, 1534,    0, 1532, 1535, 1536, 1543, 1543, 1544,
     1544, 1545, 1545,    0, 1537, 1540, 1546, 1546,    0, 1541,
     1547, 1547, 1548, 1548, 1549, 1549, 1542, 1550, 1550, 1543,

     1551, 1551, 1552, 1552, 1553, 1553, 1544, 1554, 1554, 1555,
     1555, 1556, 1556, 1557, 1557, 1558, 1558, 1559, 1559, 1560,
     1560, 1561, 1561, 1562, 1562, 1563, 1563, 1564, 1564, 1565,
     1565, 1566, 1566,    0, 1566, 1566, 1566, 1566, 1567, 1567,
     1568, 1568, 1570, 1570, 1567, 1569, 1569, 1571, 1571, 1572,
     1572,    0, 1565,    0, 1573, 1573, 1574, 1574, 1576, 1576,
     1575, 1575, 1577, 1577,    0, 1578, 1578, 1579, 1579, 1580,
     1580, 1581, 1581, 1582, 1582,    0, 1583, 1583, 1574, 1568,
     1584, 1584, 1569, 1570, 1572, 1573, 1571, 1575, 1585, 1585,
        0, 1579, 1586, 1586, 1587, 1587,    0, 1582, 1583, 1577,

     1578, 1588, 1588,    0, 1581, 1589, 1589, 1590, 1590, 1591,
     1591,    0, 1580, 1592, 1592,    0, 1586, 1593, 1593, 1594,
     1594, 1595, 1595, 1588, 1596, 1596,    0, 1587, 1597, 1597,
     1598, 1598, 1597, 1600, 1600, 1592, 1599, 1599,    0, 1593,
     1601, 1601, 1602, 1602, 1591, 1603, 1603, 1604, 1604,    0,
     1594, 1605, 1605, 1606, 1606, 1609, 1609, 1595, 1607, 1607,
     1599, 1608, 1608,    0, 1610, 1610, 1611, 1611, 1612, 1612,
        0, 1612, 1612, 1600, 1601, 1613, 1613, 1614, 1614,    0,
     1603,    0, 1602,    0, 1615, 1615, 1604, 1610, 1609, 1607,
     1616, 1616, 1618, 1618, 1605, 1608, 1606, 1617, 1617, 1619,

     1619, 1620, 1620, 1621, 1621, 1611, 1625, 1625, 1614, 1622,
     1622, 1623, 1623, 1626, 1626, 1613, 1613, 1613, 1615, 1624,
     1624, 1627, 1627, 1617,    0, 1620,    0, 1619, 1628, 1628,
     1618, 1629, 1629, 1622, 1616, 1623,    0, 1621, 1630, 1630,
     1625, 1632, 1632, 1624, 1631, 1631, 1633, 1633, 1634, 1634,
     1635, 1635, 1626, 1636, 1636, 1637, 1637,    0, 1638, 1638,
        0, 1639, 1639, 1630, 1640, 1640, 1631, 1641, 1641, 1642,
     1642, 1643, 1643,    0, 1644, 1644, 1645, 1645, 1646, 1646,
     1632, 1639, 1648, 1648, 1640, 1647, 1647,    0, 1637, 1638,
     1649, 1649, 1643, 1642,    0, 1650, 1650, 1651, 1651,    0,

     1645,    0, 1646,    0, 1641, 1644, 1652, 1652, 1647, 1653,
     1653, 1654, 1654, 1655, 1655, 1656, 1656, 1658, 1658, 1657,
     1657, 1648,    0, 1660, 1660,    0, 1659, 1659,    0, 1649,
     1650, 1661, 1661, 1662, 1662, 1663, 1663, 1664, 1664, 1665,
     1665, 1655, 1666, 1666, 1667, 1667, 1653, 1660, 1658, 1656,
     1654, 1657, 1659, 1668, 1668, 1669, 1669, 1670, 1670, 1661,
     1671, 1671, 1672, 1672, 1664, 1673, 1673, 1662, 1674, 1674,
     1663, 1675, 1675, 1674, 1676, 1676, 1677, 1677, 1665, 1678,
     1678, 1679, 1679, 1680, 1680,    0, 1672, 1680,    0, 1680,
     1681, 1681, 1682, 1682, 1671, 1683, 1683, 1684, 1684, 1685,

     1685, 1686, 1686,    0, 1673, 1687, 1687, 1688, 1688, 1689,
     1689, 1690, 1690, 1691, 1691, 1692, 1692,    0, 1691, 1693,
     1693, 1694, 1694, 1695, 1695, 1686,    0, 1696, 1696, 1697,
     1697, 1698, 1698,    0, 1684, 1699, 1699,    0, 1692, 1685,
     1685, 1694, 1700, 1700, 1687,    0, 1695,    0, 1690, 1696,
     1701, 1701,    0, 1697, 1702, 1702, 1703, 1703, 1693, 1698,
     1704, 1704, 1705, 1705, 1706, 1706, 1707, 1707, 1709, 1709,
        0, 1708, 1708, 1709, 1710, 1710, 1711, 1711, 1712, 1712,
     1713, 1713, 1700, 1714, 1714,    0, 1701, 1715, 1715,    0,
     1716, 1716,    0, 1704, 1702, 1717, 1717, 1718, 1718, 1703,

     1705, 1706, 1708, 1707, 1719, 1719, 1720, 1720, 1721, 1721,
     1715, 1713,    0, 1712, 1716, 1722, 1722, 1723, 1723, 1724,
     1724, 1725, 1725,    0, 1714, 1726, 1726, 1727, 1727, 1728,
     1728, 1729, 1729, 1730, 1730, 1731, 1731,    0, 1732, 1732,
        0, 1724, 1733, 1733, 1734, 1734, 1722,    0, 1723, 1726,
        0, 1735, 1735, 1724, 1725, 1738, 1738, 1736, 1736,    0,
     1727, 1737, 1737, 1737, 1737, 1733, 1728, 1739, 1739,    0,
     1729,    0, 1731,    0, 1730, 1732, 1735, 1736, 1738, 1740,
     1740, 1741, 1741,    0, 1734, 1742, 1742, 1739, 1743, 1743,
        0, 1744, 1744, 1745, 1745, 1747, 1747, 1746, 1746, 1748,

     1748, 1749, 1749, 1750, 1750, 1751, 1751, 1752, 1752, 1742,
     1753, 1753, 1754, 1754, 1741, 1744,    0, 1745, 1740, 1746,
     1743, 1755, 1755, 1750, 1756, 1756,    0, 1747, 1757, 1757,
     1758, 1758, 1759, 1759, 1760, 1760, 1761, 1761,    0, 1752,
     1762, 1762, 1753, 1763, 1763,    0, 1754,    0, 1756,    0,
     1753, 1764, 1764,    0, 1755, 1759, 1757, 1758, 1765, 1765,
     1766, 1766, 1767, 1767, 1761, 1768, 1768, 1769, 1769, 1770,
     1770, 1760, 1771, 1771, 1762, 1764, 1772, 1772, 1773, 1773,
     1774, 1774, 1763, 1775, 1775, 1776, 1776, 1777, 1777, 1778,
     1778, 1765, 1779, 1779, 1780, 1780, 1771,    0, 1766,    0,

     1767, 1781, 1781,    0, 1782, 1782, 1783, 1783,    0, 1784,
     1784, 1785, 1785, 1786, 1786, 1787, 1787,    0, 1774, 1788,
     1788, 1789, 1789,    0, 1776, 1790, 1790, 1781, 1782,    0,
     1779, 1784, 1785, 1780,    0, 1787, 1791, 1791,    0, 1783,
        0, 1783,    0, 1783, 1792, 1792, 1793, 1793,    0, 1790,
     1794, 1794,    0, 1786, 1795, 1795, 1791, 1796, 1796,    0,
     1789,    0, 1797, 1797, 1798, 1798, 1799, 1799, 1792, 1800,
     1800, 1801, 1801, 1802, 1802, 1803, 1803, 1804, 1804, 1805,
     1805, 1795, 1797,    0, 1797,    0, 1793,    0, 1806, 1806,
        0, 1796, 1807, 1807, 1808, 1808, 1809, 1809, 1810, 1810,

     1811, 1811, 1812, 1812,    0, 1801,    0, 1802, 1813, 1813,
     1803, 1806, 1814, 1814,    0, 1815, 1815,    0, 1805,    0,
     1809, 1819, 1819, 1812, 1816, 1816, 1816, 1816, 1818, 1818,
        0, 1808, 1817, 1817, 1817, 1817, 1820, 1820, 1821, 1821,
     1822, 1822, 1823, 1823,    0, 1813, 1815, 1819, 1824, 1824,
     1814,    0, 1818, 1825, 1825, 1826, 1826, 1827, 1827, 1828,
     1828,    0, 1823, 1829, 1829, 1830, 1830, 1831, 1831, 1832,
     1832,    0, 1822, 1820, 1834, 1834, 1821, 1827, 1833, 1833,
     1824, 1836, 1836,    0, 1825, 1835, 1835, 1837, 1837, 1830,
     1838, 1838, 1840, 1840, 1826, 1839, 1839,    0, 1833, 1841,

     1841,    0, 1832, 1842, 1842, 1843, 1843, 1834, 1831, 1844,
     1844, 1835, 1845, 1845, 1838, 1846, 1846,    0, 1837,    0,
     1836, 1847, 1847, 1848, 1848, 1837, 1849, 1849, 1839, 1852,
     1852, 1840, 1850, 1850, 1851, 1851, 1853, 1853, 1854, 1854,
        0, 1842,    0, 1848, 1855, 1855, 1856, 1856, 1857, 1857,
        0, 1858, 1858, 1846, 1859, 1859, 1850,    0, 1851, 1860,
     1860, 1861, 1861, 1862, 1862, 1863, 1863,    0, 1855,    0,
     1853, 1858, 1854, 1864, 1864,    0, 1857, 1859,    0, 1860,
        0, 1861,    0, 1862,    0, 1863, 1865, 1865, 1866, 1866,
     1867, 1867, 1868, 1868, 1862, 1869, 1869, 1870, 1870, 1871,

     1871, 1872, 1872, 1873, 1873, 1864, 1865, 1874, 1874, 1875,
     1875, 1876, 1876, 1877, 1877, 1880, 1880,    0, 1878, 1878,
        0, 1867, 1879, 1879,    0, 1866, 1868, 1873, 1870, 1881,
     1881,    0, 1869, 1882, 1882, 1883, 1883, 1877,    0, 1876,
     1875, 1874, 1878, 1884, 1884,    0, 1879, 1885, 1885, 1886,
     1886, 1887, 1887, 1888, 1888, 1889, 1889,    0, 1890, 1890,
     1891, 1891,    0, 1892, 1892, 1893, 1893, 1894, 1894, 1895,
     1895, 1896, 1896, 1888, 1897, 1897, 1887, 1886, 1890, 1898,
     1898, 1899, 1899, 1900, 1900, 1885, 1884, 1901, 1901,    0,
     1889, 1892, 1902, 1902, 1903, 1903, 1904, 1904, 1905, 1905,

     1893, 1906, 1906, 1907, 1907, 1897, 1894, 1895, 1899, 1908,
     1908, 1909, 1909, 1910, 1910, 1901, 1903,    0, 1898, 1902,
     1911, 1911,    0, 1907, 1912, 1912, 1913, 1913,    0, 1905,
     1908, 1914, 1914, 1915, 1915, 1904, 1916, 1916, 1917, 1917,
     1918, 1918, 1919, 1919, 1920, 1920,    0, 1921, 1921, 1923,
     1923, 1913,    0, 1914, 1922, 1922, 1915, 1911, 1925, 1925,
     1926, 1926, 1912,    0, 1920, 1924, 1924,    0, 1923, 1917,
        0, 1918, 1927, 1927, 1928, 1928,    0, 1919, 1921, 1920,
     1929, 1929, 1922,    0, 1924, 1930, 1930, 1931, 1931, 1932,
     1932, 1926,    0, 1925, 1933, 1933, 1934, 1934, 1935, 1935,

     1936, 1936, 1937, 1937, 1938, 1938, 1939, 1939, 1928, 1932,
     1940, 1940, 1941, 1941, 1942, 1942, 1943, 1943, 1944, 1944,
     1930, 1945, 1945, 1929, 1946, 1946, 1949, 1949, 1947, 1947,
     1948, 1948, 1951, 1951,    0, 1934,    0, 1950, 1950,    0,
     1939, 1952, 1952, 1953, 1953, 1940,    0, 1938, 1945, 1942,
     1954, 1954, 1951, 1955, 1955, 1956, 1956, 1943, 1946, 1947,
     1957, 1957, 1948, 1950,    0, 1949, 1958, 1958, 1959, 1959,
     1960, 1960, 1961, 1961, 1953, 1962, 1962,    0, 1954,    0,
     1952, 1963, 1963, 1967, 1967, 1955, 1956, 1964, 1964, 1965,
     1965,    0, 1957,    0, 1958, 1966, 1966, 1968, 1968, 1959,

        0, 1969, 1969, 1970, 1970, 1971, 1971, 1972, 1972,    0,
     1962, 1973, 1973,    0, 1964,    0, 1963,    0, 1967,    0,
     1965, 1969, 1966, 1970, 1974, 1974, 1975, 1975, 1976, 1976,
     1968,    0, 1971, 1977, 1977, 1978, 1978, 1979, 1979, 1980,
     1980, 1972, 1981, 1981, 1982, 1982, 1983, 1983, 1973, 1984,
     1984, 1985, 1985, 1986, 1986, 1987, 1987, 1988, 1988, 1989,
     1989,    0, 1990, 1990, 1991, 1991, 1976,    0, 1982,    0,
     1975, 1992, 1992, 1986, 1979, 1993, 1993, 1994, 1994, 1985,
     1983,    0, 1989,    0, 1988, 1995, 1995, 1996, 1996, 1984,
     1990,    0, 1991, 1997, 1997, 1998, 1998, 1992, 1999, 1999,

        0, 1994,    0, 2000, 2000, 1995, 2001, 2001, 2002, 2002,
     1993, 2003, 2003, 2004, 2004, 2007, 2007, 1997,    0, 2005,
     2005,    0, 1998, 2000,    0, 1999, 1996,    0, 2002, 2006,
     2006, 2008, 2008, 2004,    0, 2007, 2009, 2009, 2003, 2010,
     2010, 2001, 2005, 2011, 2011, 2012, 2012, 2013, 2013, 2014,
     2014,    0, 2006, 2015, 2015, 2016, 2016, 2017, 2017, 2018,
     2018, 2019, 2019, 2020, 2020, 2021, 2021,    0, 2008, 2022,
     2022,    0, 2014, 2023, 2023, 2024, 2024, 2012, 2025, 2025,
        0, 2016, 2026, 2026, 2027, 2027,    0, 2028, 2028,    0,
     2015, 2021, 2017, 2029, 2029, 2019, 2022, 2020, 2018, 2030,

     2030, 2031, 2031,    0, 2023,    0, 2027, 2028,    0, 2025,
     2026, 2032, 2032, 2029, 2033, 2033, 2034, 2034, 2035, 2035,
     2036, 2036,    0, 2037, 2037, 2038, 2038,    0, 2031, 2039,
     2039, 2040, 2040,    0, 2033, 2041, 2041, 2042, 2042, 2043,
     2043, 2035, 2037, 2036, 2038, 2044, 2044, 2045, 2045, 2034,
     2046, 2046, 2047, 2047, 2039, 2048, 2048, 2041, 2049, 2049,
        0, 2039, 2050, 2050, 2042, 2051, 2051, 2052, 2052, 2053,
     2053, 2054, 2054, 2055, 2055, 2056, 2056, 2044,    0, 2047,
     2057, 2057, 2049, 2046,    0, 2058, 2058, 2062, 2062, 2045,
        0, 2059, 2059, 2055, 2048, 2060, 2060, 2061, 2061, 2051,

     2063, 2063, 2057, 2064, 2064,    0, 2052, 2058, 2065, 2065,
     2056, 2059, 2066, 2066,    0, 2060,    0, 2061, 2062,    0,
     2063, 2067, 2067, 2068, 2068, 2069, 2069, 2064, 2070, 2070,
     2072, 2072, 2066, 2071, 2071, 2074, 2074, 2073, 2073, 2075,
     2075, 2077, 2077, 2068, 2076, 2076,    0, 2065, 2078, 2078,
     2079, 2079,    0, 2067, 2080, 2080, 2071,    0, 2081, 2081,
     2082, 2082,    0, 2072, 2069, 2073, 2083, 2083, 2076, 2084,
     2084, 2075,    0, 2079,    0, 2077,    0, 2080, 2081, 2078,
     2085, 2085, 2086, 2086,    0, 2087, 2087, 2088, 2088, 2089,
     2089, 2090, 2090, 2091, 2091, 2092, 2092, 2093, 2093, 2082,

     2094, 2094, 2086, 2095, 2095, 2096, 2096, 2097, 2097, 2098,
     2098, 2099, 2099, 2100, 2100, 2085, 2087, 2101, 2101, 2102,
     2102, 2103, 2103, 2104, 2104, 2106, 2106, 2091, 2096,    0,
     2097, 2094, 2105, 2105,    0, 2098, 2107, 2107, 2095, 2108,
     2108, 2109, 2109, 2110, 2110, 2111, 2111, 2106, 2099,    0,
     2102,    0, 2101,    0, 2103,    0, 2107, 2104,    0, 2105,
     2112, 2112, 2113, 2113, 2114, 2114, 2115, 2115,    0, 2109,
        0, 2116, 2116, 2111, 2117, 2117,    0, 2108, 2118, 2118,
     2119, 2119, 2121, 2121, 2114, 2120, 2120, 2122, 2122, 2123,
     2123, 2124, 2124, 2125, 2125, 2126, 2126, 2127, 2127, 2113,

     2115, 2112, 2116, 2128, 2128,    0, 2119, 2129, 2129, 2120,
     2130, 2130, 2131, 2131,    0, 2132, 2132, 2134, 2134, 2127,
     2123, 2118, 2126, 2133, 2133,    0, 2124, 2135, 2135, 2136,
     2136, 2137, 2137,    0, 2129, 2138, 2138, 2128, 2139, 2139,
        0,    0,    0, 2133,    0,    0,    0,    0,    0, 2130,
        0, 2131, 2132,    0,    0,    0,    0,    0,    0,    0,
        0, 2135,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 2138, 2141, 2141, 2141, 2141, 2141, 2141, 2141,
     2141, 2143,    0,    0, 2143, 2143, 2143, 2143, 2144, 2144,
     2144, 2144, 2144, 2145, 2145, 2145, 2145, 2146, 2146, 2146,

     2147,    0, 2147, 2148,    0,    0, 2148, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140,
     2140, 2140, 2140, 2140, 2140, 2140, 2140, 2140
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "NSFLexer.l"
#define INITIAL 0
#line 2 "NSFLexer.l"

// Disable generation of yyunput method to prevent unused function warnings
#define YY_NO_UNPUT 1

#if defined(WIN32) || defined(_XENON)
#pragma warning( disable : 4100 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4244 )
#pragma warning( disable : 4267 )
#endif

#if defined(_XENON)
    #include <xtl.h>
#elif defined (WIN32)
    #include <NiSystem.h>
    #include <stdio.h>
    #include <string.h>
    #include <stdlib.h>
#elif defined (_PS3)
    #include <NiSystem.h>
#endif  //#if defined(_XENON)
    #include <NiShaderFactory.h>
    #include "NSFTextFile.h"
    #include "NSFLexSymbol.h"

    extern int iErrors;
    extern YYSTYPE yylval;

    #define YY_SKIP_YYWRAP          1
    #define YY_ALWAYS_INTERACTIVE   1

    extern "C"
    {
        static int NSFParser_line_number=1;
        
        int yywrap() 
        {
            return 1;
        };
    }

    void skip0();
    void skip1();
    unsigned long HexConvert(char* buf);

    extern NSFTextFile* g_pkFile;
    
    void NSFParserResetLineNumber()
    {
        NSFParser_line_number = 1;
    }
    
    int NSFParserGetLineNumber()
    {
        return NSFParser_line_number;
    }
    
    void NSFParsererror(const char *s) 
    {
        iErrors++;
        char szErr[1024];
        NiSprintf(szErr, 1024, 
            "* ERROR: Invalid identifier \'%s\' at line %d (%s)\n",
            yytext, NSFParser_line_number, s);
        NILOG(szErr);
        if (g_pkFile)
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\nInvalid identifier \'%s\' at line %d (%s)\n",
                g_pkFile->GetFilename(), yytext, NSFParser_line_number, s);
        }
        else
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\nInvalid identifier \'%s\' at line %d (%s)\n",
                "*** Unknown File ***", yytext, NSFParser_line_number, s);
        }
    };

    void NSFParsererror2(const char *s) 
    {
        iErrors++;
        char szErr[1024];
        NiSprintf(szErr, 1024, 
             "* ERROR: %s at line %d\n",s,NSFParser_line_number);
        NILOG(szErr);
        NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
            "* ERROR: %s at line %d\n",s,NSFParser_line_number);
        if (g_pkFile)
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\n%s at line %d\n",
                g_pkFile->GetFilename(), s, NSFParser_line_number);
        }
        else
        {
            NiShaderFactory::ReportError(NISHADERERR_UNKNOWN, false, 
                "* ERROR: %s\n%s at line %d\n",
                "*** Unknown File ***", s, NSFParser_line_number);
        }
    };

    #ifndef D3DSHADER_VERSION_MAJOR
    #define D3DSHADER_VERSION_MAJOR(_Version) (((_Version)>>8)&0xFF)
    #endif  //#ifndef D3DSHADER_VERSION_MAJOR

    #ifndef D3DSHADER_VERSION_MINOR
    #define D3DSHADER_VERSION_MINOR(_Version) (((_Version)>>0)&0xFF)
    #endif  //#ifndef D3DSHADER_VERSION_MINOR

    #ifndef D3DVS_VERSION
    #define D3DVS_VERSION(_Major,_Minor) (0xFFFE0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef D3DVS_VERSION

    #ifndef D3DGS_VERSION
    #define D3DGS_VERSION(_Major,_Minor) (0xFFFD0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef D3DGS_VERSION

    #ifndef D3DPS_VERSION
    #define D3DPS_VERSION(_Major,_Minor) (0xFFFF0000|((_Major)<<8)|(_Minor))
    #endif  //#ifndef D3DPS_VERSION

    int my_yyinput (char * buf, int max_size);

    #undef YY_INPUT
    #define YY_INPUT(buf,result,max) (result = my_yyinput(buf,max))
    
    #define MAX_QUOTE_LENGTH    6 * 1024

//real            {integer}("."({digit}+))?{exponant}?
#line 2840 "..\\NSFLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 148 "NSFLexer.l"


#line 2994 "..\\NSFLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2141 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7308 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 150 "NSFLexer.l"
{ };
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 151 "NSFLexer.l"
{
                        NSFParserlval.ival=(int)atoi(yytext);
                        return N_INT;
                    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 155 "NSFLexer.l"
{ 
                        NSFParserlval.fval=(float)atof(yytext);
                        return N_FLOAT;
                    };
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 159 "NSFLexer.l"
{
                        NSFParserlval.dword=HexConvert(yytext);
                        return N_HEX;
                    };
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 164 "NSFLexer.l"
{
                        // Parse out the actual numbers
                        char szNum[32];
                        
                        // Skip the v
                        unsigned int uiIndex = 1;
                        unsigned int uiNumIndex = 0;
                        bool bFoundDot = false;
                        unsigned int uiMaj = 0;
                        unsigned int uiMin = 0;
                        
                        while (yytext[uiIndex] != 0)
                        {
                            bool bEndPack = false;
                            
                            if (yytext[uiIndex] != '.')
                                szNum[uiNumIndex++] = yytext[uiIndex];
                            else
                                bEndPack = true;
                            
                            if (yytext[uiIndex+1] == 0)
                                bEndPack = true;
                                
                            if (bEndPack)
                            {
                                szNum[uiNumIndex] = 0;
                                unsigned int uiNum = atoi(szNum);
                                
                                if (!bFoundDot)
                                    uiMaj = uiNum;
                                else
                                    uiMin = uiNum;
                                bFoundDot = true;
                                uiNumIndex = 0;
                            }
                            uiIndex++;
                        }
                        
                        NSFParserlval.vers = D3DVS_VERSION(uiMaj, uiMin);
                        
                        return N_VERSION;
                    };
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 207 "NSFLexer.l"
{   skip0();                };
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 208 "NSFLexer.l"
{   skip1();                };
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 210 "NSFLexer.l"
{   return L_ACCOLADE;      };
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 211 "NSFLexer.l"
{   return R_ACCOLADE;      };
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 213 "NSFLexer.l"
{   return L_PARENTHESE;    };
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 214 "NSFLexer.l"
{   return R_PARENTHESE;    };
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 216 "NSFLexer.l"
{   return L_BRACKET;       };
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 217 "NSFLexer.l"
{   return R_BRACKET;       };
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 219 "NSFLexer.l"
{   return L_ANGLEBRACKET;  };
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 220 "NSFLexer.l"
{   return R_ANGLEBRACKET;  };
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 222 "NSFLexer.l"
{   return OR;              };
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 224 "NSFLexer.l"
{   return ASSIGN;          };
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 225 "NSFLexer.l"
{   return COMMA;           };
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 227 "NSFLexer.l"
{   return UNDERSCORE;      };
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 229 "NSFLexer.l"
{   return ASTERIK;         };
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 230 "NSFLexer.l"
{   return FORWARDSLASH;    };
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 231 "NSFLexer.l"
{   return PLUS;            };
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 232 "NSFLexer.l"
{   return MINUS;           };
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 234 "NSFLexer.l"
{   return NSF_AT_SYMBOL;   };
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 235 "NSFLexer.l"
{   return NSF_SEMICOLON;   };
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 236 "NSFLexer.l"
{   return NSF_COLON;       };
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 238 "NSFLexer.l"
{   return NSFSHADER;       };
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 240 "NSFLexer.l"
{   return PACKINGDEF;      };
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 241 "NSFLexer.l"
{   return PD_STREAM;       };
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 242 "NSFLexer.l"
{   return PD_FIXEDFUNCTION;};
	YY_BREAK
/* Support for semantic adapter tables in NSF files */
case 31:
YY_RULE_SETUP
#line 245 "NSFLexer.l"
{ return SEMANTICADAPTERTABLE; }
	YY_BREAK
/* Based on D3DVSDE_ macros */
case 32:
YY_RULE_SETUP
#line 248 "NSFLexer.l"
{   return PDP_POSITION;    };
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 249 "NSFLexer.l"
{   return PDP_POSITION0;    };
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 250 "NSFLexer.l"
{   return PDP_POSITION1;    };
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 251 "NSFLexer.l"
{   return PDP_POSITION2;    };
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 252 "NSFLexer.l"
{   return PDP_POSITION3;    };
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 253 "NSFLexer.l"
{   return PDP_POSITION4;    };
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 254 "NSFLexer.l"
{   return PDP_POSITION5;    };
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 255 "NSFLexer.l"
{   return PDP_POSITION6;    };
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 256 "NSFLexer.l"
{   return PDP_POSITION7;    };
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 258 "NSFLexer.l"
{   return PDP_BLENDWEIGHTS;};
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 259 "NSFLexer.l"
{   return PDP_BLENDWEIGHTS;};
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 260 "NSFLexer.l"
{   return PDP_BLENDINDICES;};
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 261 "NSFLexer.l"
{   return PDP_NORMAL;      };
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 262 "NSFLexer.l"
{   return PDP_POINTSIZE;   };
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 263 "NSFLexer.l"
{   return PDP_POINTSIZE;   };
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 264 "NSFLexer.l"
{   return PDP_COLOR;       };
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 265 "NSFLexer.l"
{   return PDP_COLOR;       };
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 266 "NSFLexer.l"
{   return PDP_COLOR2;      };
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 267 "NSFLexer.l"
{   return PDP_COLOR2;      };
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 268 "NSFLexer.l"
{   return PDP_TEXCOORD0;   };
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 269 "NSFLexer.l"
{   return PDP_TEXCOORD1;   };
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 270 "NSFLexer.l"
{   return PDP_TEXCOORD2;   };
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 271 "NSFLexer.l"
{   return PDP_TEXCOORD3;   };
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 272 "NSFLexer.l"
{   return PDP_TEXCOORD4;   };
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 273 "NSFLexer.l"
{   return PDP_TEXCOORD5;   };
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 274 "NSFLexer.l"
{   return PDP_TEXCOORD6;   };
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 275 "NSFLexer.l"
{   return PDP_TEXCOORD7;   };
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 276 "NSFLexer.l"
{   return PDP_NORMAL2;     };
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 277 "NSFLexer.l"
{   return PDP_TANGENT;     };
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 278 "NSFLexer.l"
{   return PDP_BINORMAL;    };
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 279 "NSFLexer.l"
{   return PDP_EXTRADATA;   };
	YY_BREAK
/* Based on D3DVSDT_ macros and D3DDECLTYPE_ enumerations */
case 63:
YY_RULE_SETUP
#line 282 "NSFLexer.l"
{   return PDT_FLOAT1;      };
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 283 "NSFLexer.l"
{   return PDT_FLOAT2;      };
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 284 "NSFLexer.l"
{   return PDT_FLOAT3;      };
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 285 "NSFLexer.l"
{   return PDT_FLOAT4;      };
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 286 "NSFLexer.l"
{   return PDT_UBYTECOLOR;  };
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 287 "NSFLexer.l"
{   return PDT_UBYTECOLOR;  };
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 288 "NSFLexer.l"
{   return PDT_SHORT1;      };
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 289 "NSFLexer.l"
{   return PDT_SHORT2;      };
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 290 "NSFLexer.l"
{   return PDT_SHORT3;      };
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 291 "NSFLexer.l"
{   return PDT_SHORT4;      };
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 292 "NSFLexer.l"
{   return PDT_UBYTE4;      };
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 293 "NSFLexer.l"
{   return PDT_NORMSHORT1;  };
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 294 "NSFLexer.l"
{   return PDT_NORMSHORT1;  };
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 295 "NSFLexer.l"
{   return PDT_NORMSHORT2;  };
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 296 "NSFLexer.l"
{   return PDT_NORMSHORT2;  };
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 297 "NSFLexer.l"
{   return PDT_NORMSHORT3;  };
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 298 "NSFLexer.l"
{   return PDT_NORMSHORT3;  };
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 299 "NSFLexer.l"
{   return PDT_NORMSHORT4;  };
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 300 "NSFLexer.l"
{   return PDT_NORMSHORT4;  };
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 301 "NSFLexer.l"
{   return PDT_NORMPACKED3; };
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 302 "NSFLexer.l"
{   return PDT_NORMPACKED3; };
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 303 "NSFLexer.l"
{   return PDT_PBYTE1;      };
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 304 "NSFLexer.l"
{   return PDT_PBYTE2;      };
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 305 "NSFLexer.l"
{   return PDT_PBYTE3;      };
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 306 "NSFLexer.l"
{   return PDT_PBYTE4;      };
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 307 "NSFLexer.l"
{   return PDT_FLOAT2H;     };
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 308 "NSFLexer.l"
{   return PDT_NORMUBYTE4;  };
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 309 "NSFLexer.l"
{   return PDT_NORMUBYTE4;  };
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 310 "NSFLexer.l"
{   return PDT_NORMUSHORT2; };
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 311 "NSFLexer.l"
{   return PDT_NORMUSHORT2; };
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 312 "NSFLexer.l"
{   return PDT_NORMUSHORT4; };
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 313 "NSFLexer.l"
{   return PDT_NORMUSHORT4; };
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 314 "NSFLexer.l"
{   return PDT_UDEC3;       };
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 315 "NSFLexer.l"
{   return PDT_NORMDEC3;    };
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 316 "NSFLexer.l"
{   return PDT_NORMDEC3;    };
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 317 "NSFLexer.l"
{   return PDT_FLOAT16_2;   };
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 318 "NSFLexer.l"
{   return PDT_FLOAT16_4;   };
	YY_BREAK
/* Based on D3DDECLMETHOD_ enumerations */
case 100:
YY_RULE_SETUP
#line 321 "NSFLexer.l"
{   return PDTESS_DEFAULT;          };
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 322 "NSFLexer.l"
{   return PDTESS_PARTIALU;         };
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 323 "NSFLexer.l"
{   return PDTESS_PARTIALV;         };
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 324 "NSFLexer.l"
{   return PDTESS_CROSSUV;          };
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 325 "NSFLexer.l"
{   return PDTESS_UV;               };
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 326 "NSFLexer.l"
{   return PDTESS_LOOKUP;           };
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 327 "NSFLexer.l"
{   return PDTESS_LOOKUPPRESAMPLED; };
	YY_BREAK
/* Based on D3DDECLUSAGE_ enumerations */
case 107:
YY_RULE_SETUP
#line 330 "NSFLexer.l"
{   return PDU_POSITION;    };
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 331 "NSFLexer.l"
{   return PDU_BLENDWEIGHT; };
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 332 "NSFLexer.l"
{   return PDU_BLENDINDICES;};
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 333 "NSFLexer.l"
{   return PDU_NORMAL;      };
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 334 "NSFLexer.l"
{   return PDU_PSIZE;       };
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 335 "NSFLexer.l"
{   return PDU_TEXCOORD;    };
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 336 "NSFLexer.l"
{   return PDU_TANGENT;     };
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 337 "NSFLexer.l"
{   return PDU_BINORMAL;    };
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 338 "NSFLexer.l"
{   return PDU_TESSFACTOR;  };
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 339 "NSFLexer.l"
{   return PDU_POSITIONT;   };
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 340 "NSFLexer.l"
{   return PDU_COLOR;       };
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 341 "NSFLexer.l"
{   return PDU_FOG;         };
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 342 "NSFLexer.l"
{   return PDU_DEPTH;       };
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 343 "NSFLexer.l"
{   return PDU_SAMPLE;      };
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 345 "NSFLexer.l"
{   return ARTIST;          };
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 346 "NSFLexer.l"
{   return HIDDEN;          };
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 347 "NSFLexer.l"
{   return SAVE;            };
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 349 "NSFLexer.l"
{   return ATTRIBUTES;      };
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 350 "NSFLexer.l"
{   return GLOBALATTRIBUTES;};
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 351 "NSFLexer.l"
{   return ATTRIB;          };
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 352 "NSFLexer.l"
{   return ATTRIB_BOOL;     };
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 353 "NSFLexer.l"
{   return ATTRIB_STRING;   };
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 354 "NSFLexer.l"
{   return ATTRIB_UINT;     };
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 355 "NSFLexer.l"
{   return ATTRIB_FLOAT;    };
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 356 "NSFLexer.l"
{   return ATTRIB_POINT2;   };
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 357 "NSFLexer.l"
{   return ATTRIB_POINT3;   };
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 358 "NSFLexer.l"
{   return ATTRIB_POINT4;   };
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 359 "NSFLexer.l"
{   return ATTRIB_MATRIX3;  };
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 360 "NSFLexer.l"
{   return ATTRIB_TRANSFORM;};
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 361 "NSFLexer.l"
{   return ATTRIB_COLOR;    };
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 362 "NSFLexer.l"
{   return ATTRIB_TEXTURE;  };
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 364 "NSFLexer.l"
{   return OBJECTS;                     };
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 365 "NSFLexer.l"
{   return EFFECT_GENERALLIGHT;         };
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 366 "NSFLexer.l"
{   return EFFECT_POINTLIGHT;           };
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 367 "NSFLexer.l"
{   return EFFECT_DIRECTIONALLIGHT;     };
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 368 "NSFLexer.l"
{   return EFFECT_SPOTLIGHT;            };
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 369 "NSFLexer.l"
{   return EFFECT_SHADOWPOINTLIGHT;           };
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 370 "NSFLexer.l"
{   return EFFECT_SHADOWDIRECTIONALLIGHT;     };
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 371 "NSFLexer.l"
{   return EFFECT_SHADOWSPOTLIGHT;            };
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 372 "NSFLexer.l"
{   return EFFECT_ENVIRONMENTMAP;       };
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 373 "NSFLexer.l"
{   return EFFECT_PROJECTEDSHADOWMAP;   };
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 374 "NSFLexer.l"
{   return EFFECT_PROJECTEDLIGHTMAP;    };
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 375 "NSFLexer.l"
{   return EFFECT_FOGMAP;               };
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 377 "NSFLexer.l"
{   return USERDEFINEDDATA; };
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 378 "NSFLexer.l"
{   return IMPLEMENTATION;  };
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 379 "NSFLexer.l"
{   return OUTPUTSTREAM;    };
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 381 "NSFLexer.l"
{   return CLASSNAME;       };
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 383 "NSFLexer.l"
{   return PASS;            };
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 385 "NSFLexer.l"
{   return STAGE;           };
	YY_BREAK
/* Based on D3DTSS_ enumerations */
case 156:
YY_RULE_SETUP
#line 388 "NSFLexer.l"
{   return TSS_TEXTURE;                 };
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 389 "NSFLexer.l"
{   return TSS_COLOROP;                 };
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 390 "NSFLexer.l"
{   return TSS_COLORARG0;               };
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 391 "NSFLexer.l"
{   return TSS_COLORARG1;               };
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 392 "NSFLexer.l"
{   return TSS_COLORARG2;               };
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 393 "NSFLexer.l"
{   return TSS_ALPHAOP;                 };
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 394 "NSFLexer.l"
{   return TSS_ALPHAARG0;               };
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 395 "NSFLexer.l"
{   return TSS_ALPHAARG1;               };
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 396 "NSFLexer.l"
{   return TSS_ALPHAARG2;               };
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 397 "NSFLexer.l"
{   return TSS_RESULTARG;               };
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 398 "NSFLexer.l"
{   return TSS_CONSTANT_DEPRECATED;     };
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 399 "NSFLexer.l"
{   return TSS_BUMPENVMAT00;            };
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 400 "NSFLexer.l"
{   return TSS_BUMPENVMAT01;            };
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 401 "NSFLexer.l"
{   return TSS_BUMPENVMAT10;            };
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 402 "NSFLexer.l"
{   return TSS_BUMPENVMAT11;            };
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 403 "NSFLexer.l"
{   return TSS_BUMPENVLSCALE;           };
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 404 "NSFLexer.l"
{   return TSS_BUMPENVLOFFSET;          };
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 405 "NSFLexer.l"
{   return TSS_TEXCOORDINDEX;           };
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 406 "NSFLexer.l"
{   return TSS_TEXTURETRANSFORMFLAGS;   };
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 407 "NSFLexer.l"
{   return TSS_TEXTURETRANSFORMFLAGS;   };
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 408 "NSFLexer.l"
{   return TSS_TEXTRANSMATRIX;          };
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 409 "NSFLexer.l"
{   return TSS_TEXTRANSMATRIX;          };
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 411 "NSFLexer.l"
{   return TTFF_DISABLE;        };
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 412 "NSFLexer.l"
{   return TTFF_COUNT1;         };
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 413 "NSFLexer.l"
{   return TTFF_COUNT2;         };
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 414 "NSFLexer.l"
{   return TTFF_COUNT3;         };
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 415 "NSFLexer.l"
{   return TTFF_COUNT4;         };
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 416 "NSFLexer.l"
{   return TTFF_PROJECTED;      };
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 418 "NSFLexer.l"
{   return PROJECTED;           };
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 419 "NSFLexer.l"
{   return USEMAPINDEX;         };
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 420 "NSFLexer.l"
{   return USEMAPVALUE;         };
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 421 "NSFLexer.l"
{   return INVERSE;             };
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 422 "NSFLexer.l"
{   return TRANSPOSE;           };
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 424 "NSFLexer.l"
{   return TTSRC_GLOBAL;        };
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 425 "NSFLexer.l"
{   return TTSRC_CONSTANT;      };
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 427 "NSFLexer.l"
{   return TT_WORLD_PARALLEL;       };
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 428 "NSFLexer.l"
{   return TT_WORLD_PERSPECTIVE;    };
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 429 "NSFLexer.l"
{   return TT_WORLD_SPHERE_MAP;     };
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 430 "NSFLexer.l"
{   return TT_CAMERA_SPHERE_MAP;    };
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 431 "NSFLexer.l"
{   return TT_SPECULAR_CUBE_MAP;    };
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 432 "NSFLexer.l"
{   return TT_DIFFUSE_CUBE_MAP;     };
	YY_BREAK
/* Based on D3DTSS_TCI_ enumerations */
case 197:
YY_RULE_SETUP
#line 435 "NSFLexer.l"
{   return TCI_PASSTHRU;            };
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 436 "NSFLexer.l"
{   return TCI_CAMERASPACENORMAL;   };
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 437 "NSFLexer.l"
{   return TCI_CAMERASPACEPOSITION; };
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 438 "NSFLexer.l"
{   return TCI_CAMERASPACEREFLECT;  };
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 439 "NSFLexer.l"
{   return TCI_CAMERASPACEREFLECT;  };
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 440 "NSFLexer.l"
{   return TCI_SPHEREMAP;           };
	YY_BREAK
/* Based on D3DTOP_ enumerations */
case 203:
YY_RULE_SETUP
#line 443 "NSFLexer.l"
{   return TOP_DISABLE;                     };
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 444 "NSFLexer.l"
{   return TOP_SELECTARG1;                  };
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 445 "NSFLexer.l"
{   return TOP_SELECTARG2;                  };
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 446 "NSFLexer.l"
{   return TOP_MODULATE;                    };
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 447 "NSFLexer.l"
{   return TOP_MODULATE2X;                  };
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 448 "NSFLexer.l"
{   return TOP_MODULATE4X;                  };
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 449 "NSFLexer.l"
{   return TOP_ADD;                         };
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 450 "NSFLexer.l"
{   return TOP_ADDSIGNED;                   };
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 451 "NSFLexer.l"
{   return TOP_ADDSIGNED2X;                 };
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 452 "NSFLexer.l"
{   return TOP_SUBTRACT;                    };
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 453 "NSFLexer.l"
{   return TOP_ADDSMOOTH;                   };
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 454 "NSFLexer.l"
{   return TOP_BLENDDIFFUSEALPHA;           };
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 455 "NSFLexer.l"
{   return TOP_BLENDTEXTUREALPHA;           };
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 456 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 457 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 458 "NSFLexer.l"
{   return TOP_BLENDFACTORALPHA;            };
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 459 "NSFLexer.l"
{   return TOP_BLENDTEXTUREALPHAPM;         };
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 460 "NSFLexer.l"
{   return TOP_BLENDCURRENTALPHA;           };
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 461 "NSFLexer.l"
{   return TOP_PREMODULATE;                 };
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 462 "NSFLexer.l"
{   return TOP_MODULATEALPHA_ADDCOLOR;      };
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 463 "NSFLexer.l"
{   return TOP_MODULATECOLOR_ADDALPHA;      };
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 464 "NSFLexer.l"
{   return TOP_MODULATEINVALPHA_ADDCOLOR;   };
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 465 "NSFLexer.l"
{   return TOP_MODULATEINVCOLOR_ADDALPHA;   };
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 466 "NSFLexer.l"
{   return TOP_BUMPENVMAP;                  };
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 467 "NSFLexer.l"
{   return TOP_BUMPENVMAPLUMINANCE;         };
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 468 "NSFLexer.l"
{   return TOP_DOTPRODUCT3;                 };
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 469 "NSFLexer.l"
{   return TOP_MULTIPLYADD;                 };
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 470 "NSFLexer.l"
{   return TOP_LERP;                        };
	YY_BREAK
/* Based on D3DTA_ macros */
case 231:
YY_RULE_SETUP
#line 473 "NSFLexer.l"
{   return TA_CURRENT;                      };
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 474 "NSFLexer.l"
{   return TA_DIFFUSE;                      };
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 475 "NSFLexer.l"
{   return TA_SELECTMASK;                   };
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 476 "NSFLexer.l"
{   return TA_SPECULAR;                     };
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 477 "NSFLexer.l"
{   return TA_TEMP;                         };
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 478 "NSFLexer.l"
{   return TA_TEXTURE;                      };
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 479 "NSFLexer.l"
{   return TA_TFACTOR;                      };
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 480 "NSFLexer.l"
{   return TA_ALPHAREPLICATE;               };
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 481 "NSFLexer.l"
{   return TA_COMPLEMENT;                   };
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 483 "NSFLexer.l"
{   return NTM_BASE;    };
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 484 "NSFLexer.l"
{   return NTM_DARK;    };
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 485 "NSFLexer.l"
{   return NTM_DETAIL;  };
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 486 "NSFLexer.l"
{   return NTM_GLOSS;   };
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 487 "NSFLexer.l"
{   return NTM_GLOW;    };
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 488 "NSFLexer.l"
{   return NTM_BUMP;    };
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 489 "NSFLexer.l"
{   return NTM_DECAL;   };
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 490 "NSFLexer.l"
{   return NTM_NORMAL;   };
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 491 "NSFLexer.l"
{   return NTM_PARALLAX;   };
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 493 "NSFLexer.l"
{   return SAMPLER;             };
	YY_BREAK
/* Based on D3DSAMP_ enumerations */
case 250:
YY_RULE_SETUP
#line 496 "NSFLexer.l"
{   return TSAMP_ADDRESSU;                  };
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 497 "NSFLexer.l"
{   return TSAMP_ADDRESSV;                  };
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 498 "NSFLexer.l"
{   return TSAMP_ADDRESSW;                  };
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 499 "NSFLexer.l"
{   return TSAMP_BORDERCOLOR;               };
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 500 "NSFLexer.l"
{   return TSAMP_MAGFILTER;                 };
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 501 "NSFLexer.l"
{   return TSAMP_MINFILTER;                 };
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 502 "NSFLexer.l"
{   return TSAMP_MIPFILTER;                 };
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 503 "NSFLexer.l"
{   return TSAMP_MIPMAPLODBIAS;             };
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 504 "NSFLexer.l"
{   return TSAMP_MAXMIPLEVEL;               };
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 505 "NSFLexer.l"
{   return TSAMP_MAXANISOTROPY;             };
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 506 "NSFLexer.l"
{   return TSAMP_SRGBTEXTURE;               };
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 507 "NSFLexer.l"
{   return TSAMP_ELEMENTINDEX;              };
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 508 "NSFLexer.l"
{   return TSAMP_DMAPOFFSET;                };
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 509 "NSFLexer.l"
{   return TSAMP_ALPHAKILL_DEPRECATED;      };
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 510 "NSFLexer.l"
{   return TSAMP_COLORKEYOP_DEPRECATED;     };
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 511 "NSFLexer.l"
{   return TSAMP_COLORSIGN_DEPRECATED;      };
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 512 "NSFLexer.l"
{   return TSAMP_COLORKEYCOLOR_DEPRECATED;  };
	YY_BREAK
/* Based on D3DSAMP_ enumerations */
case 267:
YY_RULE_SETUP
#line 515 "NSFLexer.l"
{   return TADDR_WRAP;                      };
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 516 "NSFLexer.l"
{   return TADDR_MIRROR;                    };
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 517 "NSFLexer.l"
{   return TADDR_CLAMP;                     };
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 518 "NSFLexer.l"
{   return TADDR_BORDER;                    };
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 519 "NSFLexer.l"
{   return TADDR_MIRRORONCE;                };
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 520 "NSFLexer.l"
{   return TADDR_CLAMPTOEDGE_DEPRECATED;    };
	YY_BREAK
/* Based on D3DTEXF_ enumerations */
case 273:
YY_RULE_SETUP
#line 523 "NSFLexer.l"
{   return TEXF_NONE;                       };
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 524 "NSFLexer.l"
{   return TEXF_POINT;                      };
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 525 "NSFLexer.l"
{   return TEXF_LINEAR;                     };
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 526 "NSFLexer.l"
{   return TEXF_ANISOTROPIC;                };
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 527 "NSFLexer.l"
{   return TEXF_PYRAMIDALQUAD;              };
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 528 "NSFLexer.l"
{   return TEXF_GAUSSIANQUAD;               };
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 529 "NSFLexer.l"
{   return TEXF_QUINCUNX_DEPRECATED;        };
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 530 "NSFLexer.l"
{   return TEXF_FLATCUBIC_DEPRECATED;       };
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 531 "NSFLexer.l"
{   return TEXF_GAUSSIANCUBIC_DEPRECATED;   };
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 532 "NSFLexer.l"
{   return TEXF_MAX_DEPRECATED;             };
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 534 "NSFLexer.l"
{   return TAK_DISABLE_DEPRECATED;  };
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 535 "NSFLexer.l"
{   return TAK_ENABLE_DEPRECATED;   };
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 537 "NSFLexer.l"
{   return TCKOP_DISABLE_DEPRECATED;    };
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 538 "NSFLexer.l"
{   return TCKOP_ALPHA_DEPRECATED;      };
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 539 "NSFLexer.l"
{   return TCKOP_RGBA_DEPRECATED;       };
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 540 "NSFLexer.l"
{   return TCKOP_KILL_DEPRECATED;       };
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 542 "NSFLexer.l"
{   return TOKEN_TEXTURE;         };
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 544 "NSFLexer.l"
{   return TEXTURE_SOURCE; };
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 547 "NSFLexer.l"
{   return RENDERSTATES;    };
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 549 "NSFLexer.l"
{   return CMDEFINED;       };
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 550 "NSFLexer.l"
{   return CMATTRIBUTE;     };
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 551 "NSFLexer.l"
{   return CMCONSTANT;      };
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 552 "NSFLexer.l"
{   return CMGLOBAL;        };
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 553 "NSFLexer.l"
{   return CMOPERATOR;      };
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 554 "NSFLexer.l"
{   return CMOBJECT;        };
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 555 "NSFLexer.l"
{   return VSCONSTANTMAP;   };
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 556 "NSFLexer.l"
{   return GSCONSTANTMAP;   };
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 557 "NSFLexer.l"
{   return PSCONSTANTMAP;   };
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 559 "NSFLexer.l"
{   return SKINBONEMATRIX3; };
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 561 "NSFLexer.l"
{   return VSPROGRAM;       };
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 562 "NSFLexer.l"
{   return GSPROGRAM;       };
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 563 "NSFLexer.l"
{   return PSPROGRAM;       };
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 564 "NSFLexer.l"
{   return PROGRAM;         };
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 565 "NSFLexer.l"
{   return ENTRYPOINT;      };
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 566 "NSFLexer.l"
{   return SHADERTARGET;    };
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 567 "NSFLexer.l"
{   return SOFTWAREVP;      };
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 569 "NSFLexer.l"
{   return STREAMOUTPUT;        };
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 570 "NSFLexer.l"
{   return STREAMOUTTARGETS;    };
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 571 "NSFLexer.l"
{   return STREAMOUTAPPEND;     };
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 573 "NSFLexer.l"
{   return MAXVERTEXCOUNT;  };
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 574 "NSFLexer.l"
{   return OUTPUTPRIMTYPE;  };
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 575 "NSFLexer.l"
{   return _POINT;          };
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 576 "NSFLexer.l"
{   return _LINE;           };
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 577 "NSFLexer.l"
{   return _TRIANGLE;       };
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 578 "NSFLexer.l"
{   return VERTEXFORMAT;    };
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 579 "NSFLexer.l"
{   return FMT_FLOAT;       };
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 580 "NSFLexer.l"
{   return FMT_INT;         };
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 581 "NSFLexer.l"
{   return FMT_UINT;        };
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 583 "NSFLexer.l"
{   return REQUIREMENTS;            };
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 584 "NSFLexer.l"
{   return VSVERSION;               };
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 585 "NSFLexer.l"
{   return GSVERSION;               };
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 586 "NSFLexer.l"
{   return PSVERSION;               };
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 587 "NSFLexer.l"
{   return USERVERSION;             };
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 588 "NSFLexer.l"
{   return PLATFORM;                };
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 589 "NSFLexer.l"
{   return BONESPERPARTITION;       };
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 590 "NSFLexer.l"
{   return BINORMALTANGENTMETHOD;   };
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 591 "NSFLexer.l"
{   return BINORMALTANGENTUVSOURCE;   };
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 592 "NSFLexer.l"
{   return NBTMETHOD_NONE;          };
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 593 "NSFLexer.l"
{   return NBTMETHOD_NI;            };
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 594 "NSFLexer.l"
{   return NBTMETHOD_MAX;           };
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 595 "NSFLexer.l"
{   return NBTMETHOD_ATI;           };
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 597 "NSFLexer.l"
{   
                        NSFParserlval.bval = true;      
                        return N_BOOL;
                    };
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 601 "NSFLexer.l"
{   
                        NSFParserlval.bval = false;
                        return N_BOOL;
                    };
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 606 "NSFLexer.l"
{   NSFParser_line_number++;          }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 607 "NSFLexer.l"
{}
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 609 "NSFLexer.l"
{
                        int iLength = (strlen(yytext));
                        NSFParserlval.sval = NiAlloc(char, iLength+1);
                        NiStrncpy(NSFParserlval.sval, iLength+1, yytext, 
                            iLength);
                        return N_STRING;
                    };
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 616 "NSFLexer.l"
{
                        int iLength = (strlen(yytext));
                        NSFParserlval.sval = NiAlloc(char, iLength+1);
                        NiStrncpy(NSFParserlval.sval, iLength+1, yytext, 
                            iLength);
                        return PATH;
                    };
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 624 "NSFLexer.l"
{
                        int iAllocSize;
                        int l = (strlen(yytext) - 2);
                        if (l > MAX_QUOTE_LENGTH)
                        {
                            NIASSERT("Quote too long!");
                            iAllocSize = l;
                        }
                        else
                        {
                            iAllocSize = MAX_QUOTE_LENGTH;
                        }
                        NSFParserlval.sval = NiAlloc(char, iAllocSize+1);
                        NiStrncpy(NSFParserlval.sval, l+1, &yytext[1], l);
                        return N_QUOTE;
                    }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 641 "NSFLexer.l"
{
                        NSFParsererror("Syntax Error");
                    }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 645 "NSFLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 4884 "..\\NSFLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2141 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2141 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 2140);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 645 "NSFLexer.l"


void skip0()
{
    char c;
    while (((c = g_pkFile->GetData()[g_pkFile->GetPos()++]) !='\n') && 
        (c != EOF));
    NSFParser_line_number++;
}

void skip1()
{
    char c0,c1;
    while (1)
    {
        c0 = g_pkFile->GetData()[g_pkFile->GetPos()++]; 
        if (c0==EOF)
        {
            NILOG("err: EOF in comment!\n");
            exit(-1);
        }

        if (c0 == '\n')
            NSFParser_line_number++;

        c1 = g_pkFile->GetData()[g_pkFile->GetPos()++];
        if (c1 == EOF)
        {
            NILOG("err: EOF in comment!\n");
            exit(-1);
        }

        if ((c0 == '*') && (c1 == '/'))
            break;  

        g_pkFile->GetPos()--;
    }
}

/*********************************************
  This routine is replaces the Flex 
  "internal" YY_INPUT macro
  that it uses to get input
*********************************************/

int my_yyinput (char * buf, int max_size)
{

    if (g_pkFile->GetSize() <= g_pkFile->GetPos()) 
        return YY_NULL;

    char c = g_pkFile->GetData()[g_pkFile->GetPos()++];
    
    if (c == EOF)
        return YY_NULL;

    buf[0] = c;
    buf[1] = 0;

    return 1;
}

unsigned long HexConvert(char* buf)
{
    if (!buf || (strcmp(buf, "") == 0))
        return 0;

    int iLen = strlen(buf);
    int iDigitVal = 1;
    int iValue = 0;
    
    // Skip the terminating 0
    iLen--;
    char* pchCurr = &buf[iLen];
    while ((*pchCurr != 'x') && (*pchCurr != 'X'))
    {
        if ((*pchCurr == 'a') || (*pchCurr == 'A'))
            iValue += iDigitVal * 10;
        else
        if ((*pchCurr == 'b') || (*pchCurr == 'B'))
            iValue += iDigitVal * 11;
        else
        if ((*pchCurr == 'c') || (*pchCurr == 'C'))
            iValue += iDigitVal * 12;
        else
        if ((*pchCurr == 'd') || (*pchCurr == 'D'))
            iValue += iDigitVal * 13;
        else
        if ((*pchCurr == 'e') || (*pchCurr == 'E'))
            iValue += iDigitVal * 14;
        else
        if ((*pchCurr == 'f') || (*pchCurr == 'F'))
            iValue += iDigitVal * 15;
        else
            iValue += iDigitVal * (*pchCurr - '0');
            
        iDigitVal *= 16;
        iLen--;
        pchCurr = &buf[iLen];
    }
    
    return iValue;
}

void NSFParserReset()
{
    YY_NEW_FILE;
} 

void NSFParserReleaseBuffer()
{
    yy_delete_buffer(yy_current_buffer);
}
    
