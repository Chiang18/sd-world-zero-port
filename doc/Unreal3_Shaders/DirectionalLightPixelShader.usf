/*=============================================================================
	DirectionalLightPixelShader.hlsl: Directional light pixel shader.
	Copyright 1998-2009 Epic Games, Inc. All Rights Reserved.
=============================================================================*/

#define NEEDS_LIGHTMAP_COORDINATE STATICLIGHTING_TEXTUREMASK

#include "Common.usf"
#include "Material.usf"
#include "VertexFactory.usf"

half3 LightColor;
sampler2D ShadowTexture;

void Main(
	in FVertexFactoryInterpolants FactoryInterpolants,
	in float3 TangentLightVector : TEXCOORD4,
	in float4 WorldLightVector : TEXCOORD5,
	in float3 CameraVector : TEXCOORD6,
	in float4 PixelPosition : TEXCOORD7,
	OPTIONAL_FacingSign
	out float4 OutColor : COLOR0
	)
{
	FMaterialParameters MaterialParameters = GetMaterialParameters(FactoryInterpolants);
	CalcMaterialParameters(MaterialParameters,FacingSign,CameraVector,PixelPosition,TangentLightVector);

#if STATICLIGHTING_TEXTUREMASK
	half	LightMask = Square(tex2D(ShadowTexture,GetLightMapCoordinate(FactoryInterpolants)).r);
#elif STATICLIGHTING_VERTEXMASK
	half	LightMask = WorldLightVector.w;
#else
	half	LightMask = 1;
#endif

	GetMaterialClipping(MaterialParameters);

	OutColor.rgb = GetLightAttenuation(MaterialParameters.ScreenPosition) *
		LightMask *
		GetMaterialPointLightTransfer(MaterialParameters,WorldLightVector.xyz,0) *
		LightColor;

	OutColor.a = 0.0f;
		
	OutColor = RETURN_COLOR(AccumulateSceneColor(OutColor));
}
